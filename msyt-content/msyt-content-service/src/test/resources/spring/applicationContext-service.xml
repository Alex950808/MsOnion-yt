<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
			 xmlns:context="http://www.springframework.org/schema/context" 
			 xmlns:p="http://www.springframework.org/schema/p"
			 xmlns:aop="http://www.springframework.org/schema/aop" 
			 xmlns:tx="http://www.springframework.org/schema/tx"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans 
			 								     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
											     http://www.springframework.org/schema/context 
											    http://www.springframework.org/schema/context/spring-context-4.0.xsd
											    http://www.springframework.org/schema/aop 
											   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
											   http://www.springframework.org/schema/tx 
											  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
											  http://www.springframework.org/schema/util 
											  http://www.springframework.org/schema/util/spring-util-4.0.xsd
											 http://code.alibabatech.com/schema/dubbo 
        									 http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	<!-- 配置包扫描器 -->
	<!--  注意，这里扫描的包 和 springmvc 中扫描的包，不要冲突！！！ -->

	<!-- Member（公司内部成员）-->
	<context:component-scan base-package="cc.msonion.carambola.member.service"></context:component-scan>
	
	<!-- 扫描多个包，可以使用 ,(逗号）或者；(分号） 分隔 -->

	<!-- Redis的Key生成器 -->
	<context:component-scan base-package="cc.msonion.carambola.member.service.redis.key.impl"></context:component-scan>


	<!-- 发布dubbo服务 -->
	<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="msyt-content-service" owner="yt" organization="www.msyc.cc" />

	<!-- Zookeeper 实现注册中心，集群方式 -->
	<dubbo:registry protocol="zookeeper"
	address="${zk.connectString}"  timeout="${msonion_dubbo_registry_timeout}"  />

	<!-- 用dubbo协议在20800端口暴露服务 -->
	<!-- 这个采用推荐的dubbo协议(tcp传输协议)（底层通过netty实现）（默认采用Hessian序列化方式）在20990端口暴露服务 -->
	<!--<dubbo:protocol name="dubbo" port="20990" serialization="hessian2" host="${dubbo.protocol.host}" />-->
	<!--dubbox中引入Kryo和FST这两种高效Java序列化实现，来逐步取代原生dubbo中的hessian2,如果使用kryo记得添加依赖 -->
	<!-- kryo的确会有这种问题 kryo，目前我们各个服务api升级频繁，增加字段就某一方的api不更新就报错了，这对于上线影响比较大，只能切换回Hessian2先了，或者只传输JSON或者Map类型的容器对象。 -->
	<dubbo:protocol name="dubbo" port="20800" />

	<!-- timeout远程服务调用超时时间(毫秒) -->
	<!-- threads该服务线程池大小 -->
	<!-- accepts限制服务器端接受的连接不能超过1000个 , accepts="1000"  -->
	<!-- 随机token令牌，使用UUID生成 ，防止消费者绕过注册中心访问提供者-->
	<dubbo:provider timeout="${msonion_dubbo_service_timeout}" token="true"/>

	<!-- 设置服务超时时间，默认1000毫秒，也就是1秒钟，如果需要调试，可以设置为 100000 毫秒，
	也就是100秒钟，不到2分钟！ ，如果上线，需要欢迎会默认的值！！！ -->
	
	<!-- 发布成员（公司内部）服务，注意：interface 都是Service 接口，而不是实现类！！！
	， ref 才是实现类 实例 ！！！ -->
	<dubbo:service interface="cc.msonion.carambola.member.service.MemberService"
		ref="memberServiceImpl"  version="${memberService.vesion}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.MenuService"
				   ref="menuServiceImpl"  version="${menuService.vesion}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.ButtonService"
				   ref="buttonServiceImpl"  version="${buttonService.version}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.MemberCateService"
				   ref="memberCateServiceImpl"  version="${memberCateService.version}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.RoleService"
				   ref="roleServiceImpl"  version="${roleService.version}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.MemberRoleService"
				   ref="memberRoleServiceImpl"  version="${memberRoleService.version}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.DepartmentService"
				   ref="departmentServiceImpl"  version="${departmentService.version}" timeout="${msonion_dubbo_service_timeout}"  />


	<dubbo:service interface="cc.msonion.carambola.member.service.ResourceGroupService"
				   ref="resourceGroupServiceImpl"  version="${resourceGroupService.version}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.ResourceService"
				   ref="resourceServiceImpl"  version="${resourceService.version}" timeout="${msonion_dubbo_service_timeout}"  />

	<dubbo:service interface="cc.msonion.carambola.member.service.RoleResourceGroupService"
				   ref="roleResourceGroupServiceImpl"  version="${roleResourceGroupService.version}" timeout="${msonion_dubbo_service_timeout}"  />



	<!-- 搜索商品，服务，注意：interface 都是Service 接口，而不是实现类！！！
	， ref 才是实现类 实例 ！！！ ref 引用前面 
	配置<context:component-scan base-package="cc.msonion.user.service,cc.msonion.search.dao">
	扫描包，已经注入到 Spring 容器中
	 -->
	<!-- <dubbo:service interface="cc.msonion.user.service.SearchItemService"
		ref="searchItemServiceImpl"  timeout="100000" /> -->
		
	<!-- <dubbo:service interface="cc.msonion.user.service.SearchItemService"
		ref="searchItemServiceImpl"  timeout="${msonion_dubbo_service_timeout}" /> -->
		
	
	<!-- 引用（调用）服务 Begin  -->

	<!-- 日志 服务 -->
	<dubbo:reference interface="cc.msonion.carambola.log.service.LogService"
		id="logService" version="${msOnionLog.version}"  timeout="${msonion_dubbo_service_timeout}" />

	<!-- 商品独立工程，商品 Service -->
	<!-- <dubbo:reference interface="cc.msonion.item.service.ItemService"
		id="itemService" /> -->

		
	<!-- 引用（调用）服务 End -->
	
		
</beans>
