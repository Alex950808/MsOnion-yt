<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			 								  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
											  http://www.springframework.org/schema/context 
											  http://www.springframework.org/schema/context/spring-context-4.0.xsd
											  http://www.springframework.org/schema/aop 
											  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
											  http://www.springframework.org/schema/tx 
											  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
											 http://www.springframework.org/schema/util 
											 http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 数据库连接池 -->
	<!-- 加载配置文件 -->
	<!-- <context:property-placeholder location="classpath:properties/db.properties" /> -->
	
	<!-- <context:property-placeholder location="classpath:properties/*.properties" /> -->

	 <context:property-placeholder location="classpath:*/properties/config-*.properties" />

	<!-- 配置文件环境切换 ### Begin  -->
	<!--
             # Environment :
             pro(production、生产环境) , pre(preview、预发布环境) , test（测试环境） , dev(develop、开发环境) , sta (stable、稳定环境)

            -->

	<!-- dev(develop、开发环境) -->
	<!--<context:property-placeholder location="classpath:dev/properties/config-*.properties"/>-->

	<!-- test（测试环境） -->
	<!--<context:property-placeholder location="classpath:test/properties/config-*.properties"/>-->

	<!-- sta (stable、稳定环境) -->
	<!--<context:property-placeholder location="classpath:sta/properties/config-*.properties"/>-->

	<!--  pre(preview、预发布环境) -->
	<!--<context:property-placeholder location="classpath:pre/properties/config-*.properties"/>-->

	<!-- pro(production、生产环境)  -->
	<!--<context:property-placeholder location="classpath:pro/properties/config-*.properties"/>-->

	<!-- 配置文件环境切换 ### End  -->
	
	<!-- 可以使用 * 把所有的配置文件加载了，不需要一一配置 -->
	<!-- Error: trying original name [jdbc.url]. javax.naming.NameNotFoundException: 
		Name [jdbc. url] is not bound in this Context. Unable to find [jdbc.url]. -->
	<!-- <context:property-placeholder location="classpath:properties/*.properties" 
		/> -->


	<!-- 数据库连接池
     1、https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8
     2、https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_DruidDataSource%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE

     通常来说，只需要修改initialSize、minIdle、maxActive。

如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。

     -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>

		<property name="driverClassName" value="${jdbc.driver}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}"/>
		<property name="minIdle" value="${jdbc.minIdle}"/>

		<!-- 配置获取连接等待超时的时间，单位毫秒 -->
		<property name="maxWait" value="${jdbc.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小，是否缓存preparedStatement，也就是PSCache。
        PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
		<property name="poolPreparedStatements" value="false" />
		<!--
         要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
         -->
		<!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->

		<!-- 配置监控统计拦截的filters，
         属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
        监控统计用的filter:stat
        日志用的filter:log4j
        防御sql注入的filter:wall
         -->
		<property name="filters" value="stat" />

		<!-- 支持Emoji表情的解决方案 -->
		<property name="connectionInitSqls" value="set names utf8mb4;"/>

	</bean>


	<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/config-mybatis.xml" />

		<!-- 配置文件环境切换 ### Begin  -->
		<!--
                 # Environment :
                 pro(production、生产环境) , pre(preview、预发布环境) , test（测试环境） , dev(develop、开发环境) , sta (stable、稳定环境)

                -->
		<!-- dev(develop、开发环境)  -->
		<!--<property name="configLocation" value="classpath:dev/mybatis/config-mybatis.xml" />-->

		<!-- test（测试环境）  -->
		<!--<property name="configLocation" value="classpath:test/mybatis/config-mybatis.xml"/>-->

		<!-- sta (stable、稳定环境) -->
		<!--<property name="configLocation" value="classpath:sta/mybatis/config-mybatis.xml" />-->

		<!-- pre(preview、预发布环境)  -->
		<!--<property name="configLocation" value="classpath:pre/mybatis/config-mybatis.xml" />-->

		<!-- pro(production、生产环境) -->
		<!--<property name="configLocation" value="classpath:pro/mybatis/config-mybatis.xml" />-->

		<!-- 配置文件环境切换 ### End  -->

	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 
		This property lets you set the base package for your mapper interface 
			files. 
			You can set more than one package by using a semicolon or comma as 
			a separator. 
			Mappers will be searched for recursively starting in the specified  package(s). 
			
			此属性允许你映射接口文件设置基础包。 
			你可以通过使用分号或逗号作为分隔符设置多个包。
			 映射器将搜索指定的包开始递归（S）。 -->
			 
		<property name="basePackage" value="cc.msonion.carambola.warehouse.dao.mapper" />
		
	</bean>
</beans>
