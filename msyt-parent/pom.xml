<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>cc.msonion.carambola</groupId>
    <artifactId>msyt-parent</artifactId>
    <version>2.0.0</version>
    <packaging>pom</packaging>
    <name>msyt-parent</name>
    <description>洋葱小姐（Ms.Onion） ，洋桃供应链，maven project parent ， http://www.yunyangtao.com</description>

    <!-- modules -->
    <modules>
        <module>msyt-parent-api</module>
        <module>msyt-parent-common</module>
        <module>msyt-parent-dao</module>
        <module>msyt-parent-interface</module>
        <module>msyt-parent-pojo</module>
        <module>msyt-parent-service</module>
        <module>msyt-parent-web</module>
        <module>msyt-parent-ext</module>
    </modules>

    <!-- 集中定义依赖版本号 -->
    <properties>

        <!-- ############################# 多套环境，切换 ## Begin #############################   -->
        <resources.dir>src/main/resources</resources.dir>
        <!-- 格式化时间方便测试环境打包  -->
        <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>

        <!-- Dubbo服务的，开发环境版本号 -->
        <dev.version>2.0.0.201707190112</dev.version>
        <!--<dev.version>2.0.0</dev.version>-->
        <!-- Dubbo服务的，测试环境版本号 -->
        <!--<test.version>2.0.0.201707071028</test.version>-->
        <test.version>2.0.0.${maven.build.timestamp}</test.version>
        <!-- Dubbo服务的，稳定环境版本号 -->
        <sta.version>2.0.0.${maven.build.timestamp}</sta.version>
        <!-- Dubbo服务的，预发布环境版本号 -->
        <pre.version>2.0.0.${maven.build.timestamp}</pre.version>
        <!-- Dubbo服务的，生产环境版本号，真实上线，是不允许服务版本号动态改变的！！！ -->
        <pro.version>2.0.5</pro.version>

        <!-- Dubbo 服务，启动时是否检查 ### Begin -->
        <!-- 如果你的Spring容器是懒加载的，或者通过API编程延迟引用服务，请关闭check，否则服务临时不可用时，会抛出异常，
        拿到null引用，如果check=false，总是会返回引用，当服务恢复时，能自动连上。 -->
        <!-- 可以通过check="false"关闭检查，比如，测试时，有些服务不关心，
        或者出现了循环依赖，必须有一方先启动。某个服务的启动时检查：(没有提供者时报错) -->

        <!-- Dubbo服务启动时是否检查，开发环境 -->
        <dev.dubbo.reference.check>false</dev.dubbo.reference.check>
        <!-- Dubbo服务启动时是否检查，测试环境 -->
        <test.dubbo.reference.check>false</test.dubbo.reference.check>
        <!-- Dubbo服务启动时是否检查，稳定环境 -->
        <sta.dubbo.reference.check>false</sta.dubbo.reference.check>
        <!-- Dubbo服务启动时是否检查，预发布环境 -->
        <pre.dubbo.reference.check>false</pre.dubbo.reference.check>
        <!-- Dubbo服务启动时是否检查，生产环境 -->
        <pro.dubbo.reference.check>false</pro.dubbo.reference.check>

        <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
        <!-- 关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
        <!-- 开发环境 -->
        <dev.dubbo.consumer.check>false</dev.dubbo.consumer.check>
        <!-- 测试环境 -->
        <test.dubbo.consumer.check>false</test.dubbo.consumer.check>
        <!-- 稳定环境 -->
        <sta.dubbo.consumer.check>false</sta.dubbo.consumer.check>
        <!-- 预发布环境 -->
        <pre.dubbo.consumer.check>false</pre.dubbo.consumer.check>
        <!-- 生产环境 -->
        <pro.dubbo.consumer.check>false</pro.dubbo.consumer.check>

        <!-- Dubbo 服务，启动时是否检查 ### End -->

        <!-- 日志中心，日志相关配置 ## Begin  -->
        <!-- 日志打印路径 -->
        <!-- 开发环境 -->
        <dev.flogger.log.path>/msyt-log/logs/flogger</dev.flogger.log.path>
        <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
        <dev.flogger.log.level>1,2,3,4</dev.flogger.log.level>
        <!-- 测试环境 -->
        <!-- 原先测试环境 -->
        <!--<test.flogger.log.path>/home/msyt/apps/msyt/apps/msyt-log/logs/flogger</test.flogger.log.path>-->
        <test.flogger.log.path>/home/resin/logs/msyt-log/flogger</test.flogger.log.path>
        <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
        <test.flogger.log.level>1,2,3,4</test.flogger.log.level>
        <!-- Docker容器集群环境：测试环境 -->
        <!--<test.flogger.log.path>/data/msyt/logs/flogger</test.flogger.log.path>-->
        <!-- 稳定环境 -->
        <!--<sta.flogger.log.path>/data/msyt/logs/flogger</sta.flogger.log.path>-->
        <sta.flogger.log.path>/home/resin/logs/msyt-log/flogger</sta.flogger.log.path>
        <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
        <sta.flogger.log.level>2,3,4</sta.flogger.log.level>
        <!-- 预发布环境 -->
        <!--<pre.flogger.log.path>/data/msyt/logs/flogger</pre.flogger.log.path>-->
        <pre.flogger.log.path>/home/resin/logs/msyt-log/flogger</pre.flogger.log.path>
        <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
        <pre.flogger.log.level>2,3,4</pre.flogger.log.level>
        <!-- 生产环境 -->
        <!--<pro.flogger.log.path>/data/msyt/logs/flogger</pro.flogger.log.path>-->
        <pro.flogger.log.path>/home/resin/logs/msyt-log/flogger</pro.flogger.log.path>
        <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
        <pro.flogger.log.level>2,3,4</pro.flogger.log.level>

        <!-- ############ Excel 导入文件的根路径，配置 ## Begin ############################ -->

        <!-- 开发环境 -->
        <dev.excel.import.file.rootDir>E:\\msyt\\excel</dev.excel.import.file.rootDir>
        <!-- 测试环境 -->
        <!-- 原先的测试环境 ： /home/msyt/apps/msyt/apps/msyt-upload/excels -->
        <test.excel.import.file.rootDir>/home/msyt/apps/msyt/apps/msyt-upload/excels</test.excel.import.file.rootDir>
        <!-- Docker容器集群环境：测试环境 -->
        <!--<test.excel.import.file.rootDir>/data/msyt/upload/excel/files</test.excel.import.file.rootDir>-->
        <!-- 稳定环境 -->
        <sta.excel.import.file.rootDir>/data/msyt/upload/excel/files</sta.excel.import.file.rootDir>
        <!-- 预发布环境 -->
        <pre.excel.import.file.rootDir>/data/msyt/upload/excel/files</pre.excel.import.file.rootDir>
        <!-- 生产环境 -->
        <pro.excel.import.file.rootDir>/data/msyt/upload/excel/files</pro.excel.import.file.rootDir>

        <!-- ############ Excel 导入文件的根路径，配置 ## End ############################ -->


        <!-- ############ 百度富文本编辑临时目录，配置 ## Begin ############################ -->

        <!-- 开发环境 -->
        <dev.ueditor.tmp.dir>D:\\msyt\\ueditor\\tmp</dev.ueditor.tmp.dir>
        <!-- 测试环境 -->
        <!-- 原先的测试环境 ： /home/msyt/apps/msyt/apps/msyt-upload/ueditor -->
        <test.ueditor.tmp.dir>/home/msyt/apps/msyt/apps/msyt-upload/ueditor</test.ueditor.tmp.dir>

        <!-- Docker容器集群环境：测试环境 -->
        <!--<test.ueditor.tmp.dir>/data/msyt/upload/ueditor/files</test.ueditor.tmp.dir>-->
        <!-- 稳定环境 -->
        <sta.ueditor.tmp.dir>/data/msyt/upload/ueditor/files</sta.ueditor.tmp.dir>
        <!-- 预发布环境 -->
        <pre.ueditor.tmp.dir>/data/msyt/upload/ueditor/files</pre.ueditor.tmp.dir>
        <!-- 生产环境 -->
        <pro.ueditor.tmp.dir>/data/msyt/upload/ueditor/files</pro.ueditor.tmp.dir>

        <!-- ############ 百度富文本编辑临时目录，配置 ## End ############################ -->


        <!-- 日志是否打印控制台 -->
        <!-- 开发环境 -->
        <dev.flogger.log.console.print>true</dev.flogger.log.console.print>
        <!-- 测试环境 -->
        <test.flogger.log.console.print>false</test.flogger.log.console.print>
        <!-- 稳定环境 -->
        <sta.flogger.log.console.print>false</sta.flogger.log.console.print>
        <!-- 预发布环境 -->
        <pre.flogger.log.console.print>false</pre.flogger.log.console.print>
        <!-- 生产环境 -->
        <pro.flogger.log.console.print>false</pro.flogger.log.console.print>

        <!-- 日志中心，日志相关配置 ## End  -->

        <!-- #############################  Redis 集群配置 ## Begin #############################  -->

        <!-- 开发环境 ## Begin -->
        <dev.redis.cluster.host.node1>redis01.msyc.dev</dev.redis.cluster.host.node1>
        <dev.redis.cluster.port.node1>7000</dev.redis.cluster.port.node1>

        <dev.redis.cluster.host.node2>redis02.msyc.dev</dev.redis.cluster.host.node2>
        <dev.redis.cluster.port.node2>7000</dev.redis.cluster.port.node2>

        <dev.redis.cluster.host.node3>redis03.msyc.dev</dev.redis.cluster.host.node3>
        <dev.redis.cluster.port.node3>7000</dev.redis.cluster.port.node3>

        <!-- Docker容器集群，有问题，连接不了！！！ -->
        <!--<dev.redis.cluster.host.node1>yt05-dev</dev.redis.cluster.host.node1>
        <dev.redis.cluster.port.node1>7000</dev.redis.cluster.port.node1>

        <dev.redis.cluster.host.node2>yt05-dev</dev.redis.cluster.host.node2>
        <dev.redis.cluster.port.node2>7001</dev.redis.cluster.port.node2>

        <dev.redis.cluster.host.node3>yt05-dev</dev.redis.cluster.host.node3>
        <dev.redis.cluster.port.node3>7002</dev.redis.cluster.port.node3>-->
        <!-- 开发环境 ## End -->

        <!-- 测试环境 ## Begin -->
        <test.redis.cluster.host.node1>redis01.msyc.dev</test.redis.cluster.host.node1>
        <test.redis.cluster.port.node1>7000</test.redis.cluster.port.node1>

        <test.redis.cluster.host.node2>redis02.msyc.dev</test.redis.cluster.host.node2>
        <test.redis.cluster.port.node2>7000</test.redis.cluster.port.node2>

        <test.redis.cluster.host.node3>redis03.msyc.dev</test.redis.cluster.host.node3>
        <test.redis.cluster.port.node3>7000</test.redis.cluster.port.node3>

        <!-- Docker 容器集群 -->
        <!--<test.redis.cluster.host.node1>testing-redis-node1</test.redis.cluster.host.node1>
        <test.redis.cluster.port.node1>6379</test.redis.cluster.port.node1>

        <test.redis.cluster.host.node2>testing-redis-node2</test.redis.cluster.host.node2>
        <test.redis.cluster.port.node2>6379</test.redis.cluster.port.node2>

        <test.redis.cluster.host.node3>testing-redis-node3</test.redis.cluster.host.node3>
        <test.redis.cluster.port.node3>6379</test.redis.cluster.port.node3>-->
        <!-- 测试环境 ## End -->

        <!-- 稳定环境 ## Begin -->
        <!--<sta.redis.cluster.host.node1>redis01.msyc.sta</sta.redis.cluster.host.node1>-->
        <!--<sta.redis.cluster.port.node1>7000</sta.redis.cluster.port.node1>-->

        <!--<sta.redis.cluster.host.node2>redis02.msyc.sta</sta.redis.cluster.host.node2>-->
        <!--<sta.redis.cluster.port.node2>7000</sta.redis.cluster.port.node2>-->

        <!--<sta.redis.cluster.host.node3>redis03.msyc.sta</sta.redis.cluster.host.node3>-->
        <!--<sta.redis.cluster.port.node3>7000</sta.redis.cluster.port.node3>-->

        <sta.redis.cluster.host.node1>redis1.msyt.testing</sta.redis.cluster.host.node1>
        <sta.redis.cluster.port.node1>53019</sta.redis.cluster.port.node1>

        <sta.redis.cluster.host.node2>redis2.msyt.testing</sta.redis.cluster.host.node2>
        <sta.redis.cluster.port.node2>53019</sta.redis.cluster.port.node2>

        <sta.redis.cluster.host.node3>redis3.msyt.testing</sta.redis.cluster.host.node3>
        <sta.redis.cluster.port.node3>53019</sta.redis.cluster.port.node3>

        <!-- 稳定环境 ## End -->

        <!-- 预发布环境 ## Begin -->
        <pre.redis.cluster.host.node1>redis01.msyt.pre</pre.redis.cluster.host.node1>
        <pre.redis.cluster.port.node1>53019</pre.redis.cluster.port.node1>

        <pre.redis.cluster.host.node2>redis02.msyt.pre</pre.redis.cluster.host.node2>
        <pre.redis.cluster.port.node2>53019</pre.redis.cluster.port.node2>

        <pre.redis.cluster.host.node3>redis03.msyt.pre</pre.redis.cluster.host.node3>
        <pre.redis.cluster.port.node3>53019</pre.redis.cluster.port.node3>
        <!-- 预发布环境 ## End -->

        <!-- 生产环境 ## Begin -->
        <pro.redis.cluster.host.node1>redis1.msyt.pro</pro.redis.cluster.host.node1>
        <pro.redis.cluster.port.node1>53019</pro.redis.cluster.port.node1>

        <pro.redis.cluster.host.node2>redis2.msyt.pro</pro.redis.cluster.host.node2>
        <pro.redis.cluster.port.node2>53019</pro.redis.cluster.port.node2>

        <pro.redis.cluster.host.node3>redis3.msyt.pro</pro.redis.cluster.host.node3>
        <pro.redis.cluster.port.node3>53019</pro.redis.cluster.port.node3>
        <!-- 生产环境 ## End -->


        <!-- #############################  Redis 集群配置 ## End #############################  -->


        <!-- #############################  Zookeeper 集群配置 ## Begin ############################### -->

        <!-- 开发环境 -->
        <!-- 之前的开发环境 -->
        <!--<dev.zk.connectString>zk01-dev:2181,zk02-dev:2181,zk04-dev:2181</dev.zk.connectString>-->

        <!-- 开发环境：Rancher 容器集群，3个节点-->
        <dev.zk.connectString>yt05-dev:2181</dev.zk.connectString>


        <!--## Docker for Hero-->
        <!--<dev.zk.connectString>yt01-dev:12181</dev.zk.connectString>-->
        <!--## Docker for Dev-->
        <!--<dev.zk.connectString>yt01-dev:13291</dev.zk.connectString>-->
        <!--## Docker for Wenqiang-->
        <!--<dev.zk.connectString>yt01-dev:12182</dev.zk.connectString>-->
        <!--## Docker for Xiongfeng-->
        <!--<dev.zk.connectString>yt01-dev:12183</dev.zk.connectString>-->
        <!--## Docker for Wuzeduan-->
        <!--<dev.zk.connectString>yt01-dev:12184</dev.zk.connectString>-->
        <!--## Docker for Mafuyan-->
		<!--<dev.zk.connectString>yt01-dev:12185</dev.zk.connectString>-->
        <!--## Docker for other01-->
        <!--<dev.zk.connectString>yt01-dev:12186</dev.zk.connectString>-->
        <!--## Docker for other02-->
        <!--<dev.zk.connectString>yt01-dev:12187</dev.zk.connectString>-->

        <!-- 测试环境 -->
        <!-- Docker 单机版： 172.16.50.241:12190 -->
        <!--<test.zk.connectString>testing-zk-node1:2181,testing-zk-node2:2181,testing-zk-node3:2181</test.zk.connectString>-->
        <!--
         ## Running in Docker , must be use IP : 172.16.50.241
            #zk.connectString=172.16.50.241:12190
            原先的测试环境
         -->
        <test.zk.connectString>172.16.50.241:12190</test.zk.connectString>


        <!-- Docker容器集群 -->
        <!--<test.zk.connectString>testing-zk-node1:2181</test.zk.connectString>-->

        <!-- 稳定环境 -->
        <sta.zk.connectString>zk1.msyt.testing:52081,zk2.msyt.testing:52081,zk3.msyt.testing:52081
        </sta.zk.connectString>
        <!--<sta.zk.connectString>zk01-dev:2181,zk02-dev:2181,zk04-dev:2181</sta.zk.connectString>-->

        <!-- 预发布环境 -->
        <pre.zk.connectString>zk1.msyt.pre:52081,zk2.msyt.pre:52081,zk3.msyt.pre:52081</pre.zk.connectString>

        <!-- 生产环境 -->
        <pro.zk.connectString>zk1.msyt.pro:52081,zk2.msyt.pro:52081,zk3.msyt.pro:52081</pro.zk.connectString>


        <!-- #############################  Zookeeper 集群配置 ## End ############################### -->


        <!-- #############################  MySQL、MariaDB 集群配置 ## Begin ############################### -->


        <!-- ########## DruidDataSource ### 配置 ## Begin ##############  -->

        <!-- 开发环境 ### Begin -->
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <dev.jdbc.initialSize>1</dev.jdbc.initialSize>
        <!-- 最小连接池数量 -->
        <dev.jdbc.minIdle>1</dev.jdbc.minIdle>
        <!-- 最大连接池数量 -->
        <dev.jdbc.maxActive>20</dev.jdbc.maxActive>
        <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
        <dev.jdbc.maxWait>60000</dev.jdbc.maxWait>
        <!--
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        有两个含义：
        1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
        <dev.jdbc.timeBetweenEvictionRunsMillis>60000</dev.jdbc.timeBetweenEvictionRunsMillis>
        <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
        <dev.jdbc.minEvictableIdleTimeMillis>60000</dev.jdbc.minEvictableIdleTimeMillis>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <test.jdbc.initialSize>1</test.jdbc.initialSize>
        <!-- 最小连接池数量 -->
        <test.jdbc.minIdle>1</test.jdbc.minIdle>
        <!-- 最大连接池数量 -->
        <test.jdbc.maxActive>20</test.jdbc.maxActive>
        <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
        <test.jdbc.maxWait>60000</test.jdbc.maxWait>
        <!--
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        有两个含义：
        1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
        <test.jdbc.timeBetweenEvictionRunsMillis>60000</test.jdbc.timeBetweenEvictionRunsMillis>
        <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
        <test.jdbc.minEvictableIdleTimeMillis>60000</test.jdbc.minEvictableIdleTimeMillis>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <sta.jdbc.initialSize>1</sta.jdbc.initialSize>
        <!-- 最小连接池数量 -->
        <sta.jdbc.minIdle>1</sta.jdbc.minIdle>
        <!-- 最大连接池数量 -->
        <sta.jdbc.maxActive>20</sta.jdbc.maxActive>
        <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
        <sta.jdbc.maxWait>60000</sta.jdbc.maxWait>
        <!--
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        有两个含义：
        1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
        <sta.jdbc.timeBetweenEvictionRunsMillis>60000</sta.jdbc.timeBetweenEvictionRunsMillis>
        <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
        <sta.jdbc.minEvictableIdleTimeMillis>60000</sta.jdbc.minEvictableIdleTimeMillis>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <pre.jdbc.initialSize>1</pre.jdbc.initialSize>
        <!-- 最小连接池数量 -->
        <pre.jdbc.minIdle>1</pre.jdbc.minIdle>
        <!-- 最大连接池数量 -->
        <pre.jdbc.maxActive>20</pre.jdbc.maxActive>
        <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
        <pre.jdbc.maxWait>60000</pre.jdbc.maxWait>
        <!--
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        有两个含义：
        1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
        <pre.jdbc.timeBetweenEvictionRunsMillis>60000</pre.jdbc.timeBetweenEvictionRunsMillis>
        <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
        <pre.jdbc.minEvictableIdleTimeMillis>60000</pre.jdbc.minEvictableIdleTimeMillis>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <pro.jdbc.initialSize>1</pro.jdbc.initialSize>
        <!-- 最小连接池数量 -->
        <pro.jdbc.minIdle>1</pro.jdbc.minIdle>
        <!-- 最大连接池数量 -->
        <pro.jdbc.maxActive>20</pro.jdbc.maxActive>
        <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
        <pro.jdbc.maxWait>60000</pro.jdbc.maxWait>
        <!--
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        有两个含义：
        1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
        <pro.jdbc.timeBetweenEvictionRunsMillis>60000</pro.jdbc.timeBetweenEvictionRunsMillis>
        <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
        <pro.jdbc.minEvictableIdleTimeMillis>60000</pro.jdbc.minEvictableIdleTimeMillis>
        <!-- 生产环境 ### End -->


        <!-- ########## DruidDataSource ### 配置 ## End ##############  -->


        <!-- ### 收集中心： myst-collector ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.collector>jdbc:mysql://172.16.50.246:13306/msyt-collector?characterEncoding=utf-8
        </dev.jdbc.url.collector>
        <!-- 用户名 -->
        <dev.jdbc.username.collector>root</dev.jdbc.username.collector>
        <!-- 密码 -->
        <dev.jdbc.password.collector>ppnn13%dkstfeb.1st</dev.jdbc.password.collector>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.collector>jdbc:mysql://172.16.50.245:13306/msyt-collector?characterEncoding=utf-8
        </test.jdbc.url.collector>
        <!-- 用户名 -->
        <test.jdbc.username.collector>root</test.jdbc.username.collector>
        <!-- 密码 -->
        <test.jdbc.password.collector>csbt34.ydhl12s</test.jdbc.password.collector>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.collector>jdbc:mysql://172.16.50.245:13306/msyt-collector?characterEncoding=utf-8
        </sta.jdbc.url.collector>
        <!-- 用户名 -->
        <sta.jdbc.username.collector>root</sta.jdbc.username.collector>
        <!-- 密码 -->
        <sta.jdbc.password.collector>csbt34.ydhl12s</sta.jdbc.password.collector>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.collector>jdbc:mysql://172.16.50.246:13306/msyt-collector?characterEncoding=utf-8
        </pre.jdbc.url.collector>
        <!-- 用户名 -->
        <pre.jdbc.username.collector>root</pre.jdbc.username.collector>
        <!-- 密码 -->
        <pre.jdbc.password.collector>ppnn13%dkstfeb.1st</pre.jdbc.password.collector>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.collector>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-collector?characterEncoding=utf-8
        </pro.jdbc.url.collector>
        <!-- 用户名 -->
        <pro.jdbc.username.collector>root</pro.jdbc.username.collector>
        <!--<pro.jdbc.username.collector>collector</pro.jdbc.username.collector>-->
        <!-- 由于收集管理中心调用到 商品管理中心（搜索），因此需要使用msyt公共的账号，才能访问 -->
        <!--<pro.jdbc.username.collector>msyt</pro.jdbc.username.collector>-->
        <!-- root密码 -->
        <pro.jdbc.password.collector>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.collector>
        <!-- collector 密码 -->
        <!--<pro.jdbc.password.collector>vUOd02*fwA1nWpINV8C3X1sqZDyuEs8w</pro.jdbc.password.collector>-->
        <!-- msyt 密码 -->
        <!--<pro.jdbc.password.collector>DqhnNNE@uCF!mO6#Ylx8XiB9V$uu6Buq</pro.jdbc.password.collector>-->

        <!-- 生产环境 ### End -->

        <!-- ### 收集中心： myst-collector ### End ########## -->


        <!-- ### 内容中心： myst-content ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.content>jdbc:mysql://172.16.50.246:13306/msyt-content?characterEncoding=utf-8
        </dev.jdbc.url.content>
        <!-- 用户名 -->
        <dev.jdbc.username.content>root</dev.jdbc.username.content>
        <!-- 密码 -->
        <dev.jdbc.password.content>ppnn13%dkstfeb.1st</dev.jdbc.password.content>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.content>jdbc:mysql://172.16.50.245:13306/msyt-content?characterEncoding=utf-8
        </test.jdbc.url.content>
        <!-- 用户名 -->
        <test.jdbc.username.content>root</test.jdbc.username.content>
        <!-- 密码 -->
        <test.jdbc.password.content>csbt34.ydhl12s</test.jdbc.password.content>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.content>jdbc:mysql://172.16.50.245:13306/msyt-content?characterEncoding=utf-8
        </sta.jdbc.url.content>
        <!-- 用户名 -->
        <sta.jdbc.username.content>root</sta.jdbc.username.content>
        <!-- 密码 -->
        <sta.jdbc.password.content>csbt34.ydhl12s</sta.jdbc.password.content>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.content>jdbc:mysql://172.16.50.246:13306/msyt-content?characterEncoding=utf-8
        </pre.jdbc.url.content>
        <!-- 用户名 -->
        <pre.jdbc.username.content>root</pre.jdbc.username.content>
        <!-- 密码 -->
        <pre.jdbc.password.content>ppnn13%dkstfeb.1st</pre.jdbc.password.content>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.content>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-content?characterEncoding=utf-8
        </pro.jdbc.url.content>
        <!-- 用户名 -->
        <pro.jdbc.username.content>root</pro.jdbc.username.content>
        <!--<pro.jdbc.username.content>content</pro.jdbc.username.content>-->
        <!-- root密码 -->
        <pro.jdbc.password.content>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.content>
        <!-- content 密码 -->
        <!--<pro.jdbc.password.content>P8H!0VCujIQUXUf$xKi2NLaejekEx9IR</pro.jdbc.password.content>-->
        <!-- 生产环境 ### End -->

        <!-- ### 内容中心： myst-content ### End ########## -->

        <!-- ### 文件资源中心： myst-fileresource ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.fileresource>jdbc:mysql://172.16.50.246:13306/msyt-fileresource?characterEncoding=utf-8
        </dev.jdbc.url.fileresource>
        <!-- 用户名 -->
        <dev.jdbc.username.fileresource>root</dev.jdbc.username.fileresource>
        <!-- 密码 -->
        <dev.jdbc.password.fileresource>ppnn13%dkstfeb.1st</dev.jdbc.password.fileresource>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.fileresource>jdbc:mysql://172.16.50.245:13306/msyt-fileresource?characterEncoding=utf-8
        </test.jdbc.url.fileresource>
        <!-- 用户名 -->
        <test.jdbc.username.fileresource>root</test.jdbc.username.fileresource>
        <!-- 密码 -->
        <test.jdbc.password.fileresource>csbt34.ydhl12s</test.jdbc.password.fileresource>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.fileresource>jdbc:mysql://172.16.50.245:13306/msyt-fileresource?characterEncoding=utf-8
        </sta.jdbc.url.fileresource>
        <!-- 用户名 -->
        <sta.jdbc.username.fileresource>root</sta.jdbc.username.fileresource>
        <!-- 密码 -->
        <sta.jdbc.password.fileresource>csbt34.ydhl12s</sta.jdbc.password.fileresource>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.fileresource>jdbc:mysql://172.16.50.246:13306/msyt-fileresource?characterEncoding=utf-8
        </pre.jdbc.url.fileresource>
        <!-- 用户名 -->
        <pre.jdbc.username.fileresource>root</pre.jdbc.username.fileresource>
        <!-- 密码 -->
        <pre.jdbc.password.fileresource>ppnn13%dkstfeb.1st</pre.jdbc.password.fileresource>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.fileresource>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-fileresource?characterEncoding=utf-8
        </pro.jdbc.url.fileresource>
        <!-- 用户名 -->
        <pro.jdbc.username.fileresource>root</pro.jdbc.username.fileresource>
        <!--<pro.jdbc.username.fileresource>fileresource</pro.jdbc.username.fileresource>-->
        <!-- root密码 -->
        <pro.jdbc.password.fileresource>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.fileresource>
        <!-- fileresource密码 -->
        <!--<pro.jdbc.password.fileresource>MjV%RTi$k20oNqomccNtoWKhndzo8N%l</pro.jdbc.password.fileresource>-->
        <!-- 生产环境 ### End -->

        <!-- ### 文件资源中心： myst-fileresource ### End ########## -->

        <!-- ### 商品中心： myst-item ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.item>jdbc:mysql://172.16.50.246:13306/msyt-item?characterEncoding=utf-8</dev.jdbc.url.item>
        <!-- 用户名 -->
        <dev.jdbc.username.item>root</dev.jdbc.username.item>
        <!-- 密码 -->
        <dev.jdbc.password.item>ppnn13%dkstfeb.1st</dev.jdbc.password.item>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.item>jdbc:mysql://172.16.50.245:13306/msyt-item?characterEncoding=utf-8</test.jdbc.url.item>
        <!-- 用户名 -->
        <test.jdbc.username.item>root</test.jdbc.username.item>
        <!-- 密码 -->
        <test.jdbc.password.item>csbt34.ydhl12s</test.jdbc.password.item>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.item>jdbc:mysql://172.16.50.245:13306/msyt-item?characterEncoding=utf-8</sta.jdbc.url.item>
        <!-- 用户名 -->
        <sta.jdbc.username.item>root</sta.jdbc.username.item>
        <!-- 密码 -->
        <sta.jdbc.password.item>csbt34.ydhl12s</sta.jdbc.password.item>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.item>jdbc:mysql://172.16.50.246:13306/msyt-item?characterEncoding=utf-8</pre.jdbc.url.item>
        <!-- 用户名 -->
        <pre.jdbc.username.item>root</pre.jdbc.username.item>
        <!-- 密码 -->
        <pre.jdbc.password.item>ppnn13%dkstfeb.1st</pre.jdbc.password.item>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.item>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-item?characterEncoding=utf-8</pro.jdbc.url.item>
        <!-- 用户名 -->
        <pro.jdbc.username.item>root</pro.jdbc.username.item>
        <!-- 由于收集管理中心，搜索需要使用到调用商品中心，因此需要使用商品中心，必须使用msyt 公共账户 -->
        <!--<pro.jdbc.username.item>msyt</pro.jdbc.username.item>-->
        <!-- root 密码 -->
        <pro.jdbc.password.item>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.item>
        <!-- item 密码 -->
        <!--<pro.jdbc.password.item>LSz4Sm5qhXmRFs#LCiISbwbFeV@BxM%0</pro.jdbc.password.item>-->
        <!-- msyt 密码 -->
        <!--<pro.jdbc.password.item>DqhnNNE@uCF!mO6#Ylx8XiB9V$uu6Buq</pro.jdbc.password.item>-->
        <!-- 生产环境 ### End -->

        <!-- ### 商品中心： myst-item ### End ########## -->

        <!-- ### 物流中心： myst-logistics ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.logistics>jdbc:mysql://172.16.50.246:13306/msyt-logistics?characterEncoding=utf-8
        </dev.jdbc.url.logistics>
        <!-- 用户名 -->
        <dev.jdbc.username.logistics>root</dev.jdbc.username.logistics>
        <!-- 密码 -->
        <dev.jdbc.password.logistics>ppnn13%dkstfeb.1st</dev.jdbc.password.logistics>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.logistics>jdbc:mysql://172.16.50.245:13306/msyt-logistics?characterEncoding=utf-8
        </test.jdbc.url.logistics>
        <!-- 用户名 -->
        <test.jdbc.username.logistics>root</test.jdbc.username.logistics>
        <!-- 密码 -->
        <test.jdbc.password.logistics>csbt34.ydhl12s</test.jdbc.password.logistics>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.logistics>jdbc:mysql://172.16.50.245:13306/msyt-logistics?characterEncoding=utf-8
        </sta.jdbc.url.logistics>
        <!-- 用户名 -->
        <sta.jdbc.username.logistics>root</sta.jdbc.username.logistics>
        <!-- 密码 -->
        <sta.jdbc.password.logistics>csbt34.ydhl12s</sta.jdbc.password.logistics>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.logistics>jdbc:mysql://172.16.50.246:13306/msyt-logistics?characterEncoding=utf-8
        </pre.jdbc.url.logistics>
        <!-- 用户名 -->
        <pre.jdbc.username.logistics>root</pre.jdbc.username.logistics>
        <!-- 密码 -->
        <pre.jdbc.password.logistics>ppnn13%dkstfeb.1st</pre.jdbc.password.logistics>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.logistics>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-logistics?characterEncoding=utf-8
        </pro.jdbc.url.logistics>
        <!-- 用户名 -->
        <pro.jdbc.username.logistics>root</pro.jdbc.username.logistics>
        <!--<pro.jdbc.username.logistics>logistics</pro.jdbc.username.logistics>-->
        <!-- root 密码 -->
        <pro.jdbc.password.logistics>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.logistics>
        <!-- logistics 密码 -->
        <!--<pro.jdbc.password.logistics>3$iesZVVbNb@UwLOh#JYjMZTHbGR5*FB</pro.jdbc.password.logistics>-->
        <!-- 生产环境 ### End -->

        <!-- ### 物流中心： myst-logistics ### End ########## -->

        <!-- ### 成员中心： myst-member ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.member>jdbc:mysql://172.16.50.246:13306/msyt-member?characterEncoding=utf-8</dev.jdbc.url.member>
        <!-- 用户名 -->
        <dev.jdbc.username.member>root</dev.jdbc.username.member>
        <!-- 密码 -->
        <dev.jdbc.password.member>ppnn13%dkstfeb.1st</dev.jdbc.password.member>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.member>jdbc:mysql://172.16.50.245:13306/msyt-member?characterEncoding=utf-8
        </test.jdbc.url.member>
        <!-- 用户名 -->
        <test.jdbc.username.member>root</test.jdbc.username.member>
        <!-- 密码 -->
        <test.jdbc.password.member>csbt34.ydhl12s</test.jdbc.password.member>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.member>jdbc:mysql://172.16.50.245:13306/msyt-member?characterEncoding=utf-8</sta.jdbc.url.member>
        <!-- 用户名 -->
        <sta.jdbc.username.member>root</sta.jdbc.username.member>
        <!-- 密码 -->
        <sta.jdbc.password.member>csbt34.ydhl12s</sta.jdbc.password.member>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.member>jdbc:mysql://172.16.50.246:13306/msyt-member?characterEncoding=utf-8</pre.jdbc.url.member>
        <!-- 用户名 -->
        <pre.jdbc.username.member>root</pre.jdbc.username.member>
        <!-- 密码 -->
        <pre.jdbc.password.member>ppnn13%dkstfeb.1st</pre.jdbc.password.member>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.member>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-member?characterEncoding=utf-8
        </pro.jdbc.url.member>
        <!-- 用户名 -->
        <pro.jdbc.username.member>root</pro.jdbc.username.member>
        <!--<pro.jdbc.username.member>member</pro.jdbc.username.member>-->
        <!-- root 密码 -->
        <pro.jdbc.password.member>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.member>
        <!-- member 密码 -->
        <!--<pro.jdbc.password.member>Yp!yE%zKjNy9kObNWw2Fe1JTbFNIXcZZ</pro.jdbc.password.member>-->
        <!-- 生产环境 ### End -->

        <!-- ### 成员中心： myst-member ### End ########## -->

        <!-- ### 系统中心： myst-system ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.system>jdbc:mysql://172.16.50.246:13306/msyt-system?characterEncoding=utf-8</dev.jdbc.url.system>
        <!-- 用户名 -->
        <dev.jdbc.username.system>root</dev.jdbc.username.system>
        <!-- 密码 -->
        <dev.jdbc.password.system>ppnn13%dkstfeb.1st</dev.jdbc.password.system>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.system>jdbc:mysql://172.16.50.245:13306/msyt-system?characterEncoding=utf-8
        </test.jdbc.url.system>
        <!-- 用户名 -->
        <test.jdbc.username.system>root</test.jdbc.username.system>
        <!-- 密码 -->
        <test.jdbc.password.system>csbt34.ydhl12s</test.jdbc.password.system>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.system>jdbc:mysql://172.16.50.245:13306/msyt-system?characterEncoding=utf-8</sta.jdbc.url.system>
        <!-- 用户名 -->
        <sta.jdbc.username.system>root</sta.jdbc.username.system>
        <!-- 密码 -->
        <sta.jdbc.password.system>csbt34.ydhl12s</sta.jdbc.password.system>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.system>jdbc:mysql://172.16.50.246:13306/msyt-system?characterEncoding=utf-8</pre.jdbc.url.system>
        <!-- 用户名 -->
        <pre.jdbc.username.system>root</pre.jdbc.username.system>
        <!-- 密码 -->
        <pre.jdbc.password.system>ppnn13%dkstfeb.1st</pre.jdbc.password.system>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.system>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-system?characterEncoding=utf-8
        </pro.jdbc.url.system>
        <!-- 用户名 -->
        <pro.jdbc.username.system>root</pro.jdbc.username.system>
        <!--<pro.jdbc.username.system>system</pro.jdbc.username.system>-->
        <!-- root 密码 -->
        <pro.jdbc.password.system>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.system>
        <!-- system 密码 -->
        <!--<pro.jdbc.password.system>QW*Ckz6R@E2PqAUxCYLRIFh1tU2jF5ae</pro.jdbc.password.system>-->
        <!-- 生产环境 ### End -->

        <!-- ### 系统中心： myst-system ### End ########## -->

        <!-- ### 仓库中心： myst-warehouse ### Begin ########## -->

        <!-- 开发环境 ### Begin -->
        <!-- 连接地址 -->
        <dev.jdbc.url.warehouse>jdbc:mysql://172.16.50.246:13306/msyt-warehouse?characterEncoding=utf-8
        </dev.jdbc.url.warehouse>
        <!-- 用户名 -->
        <dev.jdbc.username.warehouse>root</dev.jdbc.username.warehouse>
        <!-- 密码 -->
        <dev.jdbc.password.warehouse>ppnn13%dkstfeb.1st</dev.jdbc.password.warehouse>
        <!-- 开发环境 ### End -->

        <!-- 测试环境 ### Begin -->
        <!-- 连接地址 -->
        <test.jdbc.url.warehouse>jdbc:mysql://172.16.50.245:13306/msyt-warehouse?characterEncoding=utf-8
        </test.jdbc.url.warehouse>
        <!-- 用户名 -->
        <test.jdbc.username.warehouse>root</test.jdbc.username.warehouse>
        <!-- 密码 -->
        <test.jdbc.password.warehouse>csbt34.ydhl12s</test.jdbc.password.warehouse>
        <!-- 测试环境 ### End -->

        <!-- 稳定环境 ### Begin -->
        <!-- 连接地址 -->
        <sta.jdbc.url.warehouse>jdbc:mysql://172.16.50.245:13306/msyt-warehouse?characterEncoding=utf-8
        </sta.jdbc.url.warehouse>
        <!-- 用户名 -->
        <sta.jdbc.username.warehouse>root</sta.jdbc.username.warehouse>
        <!-- 密码 -->
        <sta.jdbc.password.warehouse>csbt34.ydhl12s</sta.jdbc.password.warehouse>
        <!-- 稳定环境 ### End -->

        <!-- 预发布环境 ### Begin -->
        <!-- 连接地址 -->
        <pre.jdbc.url.warehouse>jdbc:mysql://warehouse.msyt.ddb:3306/msyt-warehouse?characterEncoding=utf-8
        </pre.jdbc.url.warehouse>
        <!-- 用户名 -->
        <pre.jdbc.username.warehouse>root</pre.jdbc.username.warehouse>
        <!-- 密码 -->
        <pre.jdbc.password.warehouse>ppnn13%dkstfeb.1st</pre.jdbc.password.warehouse>
        <!-- 预发布环境 ### End -->

        <!-- 生产环境 ### Begin -->
        <!-- 连接地址 -->
        <pro.jdbc.url.warehouse>jdbc:mysql://mariadb-slb.msyt.pro:51968/msyt-warehouse?characterEncoding=utf-8
        </pro.jdbc.url.warehouse>
        <!-- 用户名 -->
        <pro.jdbc.username.warehouse>root</pro.jdbc.username.warehouse>
        <!--<pro.jdbc.username.warehouse>warehouse</pro.jdbc.username.warehouse>-->
        <!-- root 密码 -->
        <pro.jdbc.password.warehouse>u6a09oY61fLXud2aJJ0jlHAq4fcFCIJD</pro.jdbc.password.warehouse>
        <!-- warehouse 密码 -->
        <!--<pro.jdbc.password.warehouse>SZKjolQBC#MbStaUZZs9yM2N@8CoGpuf</pro.jdbc.password.warehouse>-->
        <!-- 生产环境 ### End -->

        <!-- ### 仓库中心： myst-warehouse ### End ########## -->


        <!-- #############################  MySQL、MariaDB 集群配置 ## End ############################### -->


        <!-- #############################  多套环境，切换 ## End #############################  -->

        <!-- ############################# 当前项目所有工程版本号 Begin #############################  -->

        <!-- msyt-parent , Begin -->
        <msyt-parent.version>2.0.0</msyt-parent.version>
        <msyt-parent-api.version>2.0.0</msyt-parent-api.version>
        <msyt-parent-common.version>2.0.0</msyt-parent-common.version>
        <msyt-parent-dao.version>2.0.0</msyt-parent-dao.version>
        <msyt-parent-interface.version>2.0.0</msyt-parent-interface.version>
        <msyt-parent-pojo.version>2.0.0</msyt-parent-pojo.version>
        <msyt-parent-service.version>2.0.0</msyt-parent-service.version>
        <msyt-parent-web.version>2.0.0</msyt-parent-web.version>
        <msyt-parent-ext.version>2.0.0</msyt-parent-ext.version>
        <!-- msyt-parent , End -->

        <!-- msyt-commons, Begin -->
        <msyt-commons.version>2.0.0</msyt-commons.version>
        <msyt-commons-api.version>2.0.0</msyt-commons-api.version>
        <msyt-commons-common.version>2.0.0</msyt-commons-common.version>
        <msyt-commons-dao.version>2.0.0</msyt-commons-dao.version>
        <msyt-commons-interface.version>2.0.0</msyt-commons-interface.version>
        <msyt-commons-pojo.version>2.0.0</msyt-commons-pojo.version>
        <msyt-commons-service.version>2.0.0</msyt-commons-service.version>
        <msyt-commons-web.version>2.0.0</msyt-commons-web.version>
        <msyt-commons-ext.version>2.0.0</msyt-commons-ext.version>
        <!-- msyt-commons, End -->

        <!-- msyt-member, Begin -->
        <msyt-member.version>2.0.0</msyt-member.version>
        <msyt-member-api.version>2.0.0</msyt-member-api.version>
        <msyt-member-common.version>2.0.0</msyt-member-common.version>
        <msyt-member-dao.version>2.0.0</msyt-member-dao.version>
        <msyt-member-interface.version>2.0.0</msyt-member-interface.version>
        <msyt-member-pojo.version>2.0.0</msyt-member-pojo.version>
        <msyt-member-service.version>2.0.0</msyt-member-service.version>
        <msyt-member-web.version>2.0.0</msyt-member-web.version>
        <msyt-member-ext.version>2.0.0</msyt-member-ext.version>
        <!-- msyt-member, End -->

        <!-- msyt-user, Begin -->
        <msyt-user.version>2.0.0</msyt-user.version>
        <msyt-user-api.version>2.0.0</msyt-user-api.version>
        <msyt-user-common.version>2.0.0</msyt-user-common.version>
        <msyt-user-dao.version>2.0.0</msyt-user-dao.version>
        <msyt-user-interface.version>2.0.0</msyt-user-interface.version>
        <msyt-user-pojo.version>2.0.0</msyt-user-pojo.version>
        <msyt-user-service.version>2.0.0</msyt-user-service.version>
        <msyt-user-web.version>2.0.0</msyt-user-web.version>
        <msyt-user-ext.version>2.0.0</msyt-user-ext.version>
        <!-- msyt-user, End -->

        <!-- msyt-item, Begin -->
        <msyt-item.version>2.0.0</msyt-item.version>
        <msyt-item-api.version>2.0.0</msyt-item-api.version>
        <msyt-item-common.version>2.0.0</msyt-item-common.version>
        <msyt-item-dao.version>2.0.0</msyt-item-dao.version>
        <msyt-item-interface.version>2.0.0</msyt-item-interface.version>
        <msyt-item-pojo.version>2.0.0</msyt-item-pojo.version>
        <msyt-item-service.version>2.0.0</msyt-item-service.version>
        <msyt-item-web.version>2.0.0</msyt-item-web.version>
        <msyt-item-ext.version>2.0.0</msyt-item-ext.version>
        <!-- msyt-item, End -->

        <!-- msyt-collector, Begin -->
        <msyt-collector.version>2.0.0</msyt-collector.version>
        <msyt-collector-api.version>2.0.0</msyt-collector-api.version>
        <msyt-collector-common.version>2.0.0</msyt-collector-common.version>
        <msyt-collector-dao.version>2.0.0</msyt-collector-dao.version>
        <msyt-collector-interface.version>2.0.0</msyt-collector-interface.version>
        <msyt-collector-pojo.version>2.0.0</msyt-collector-pojo.version>
        <msyt-collector-service.version>2.0.0</msyt-collector-service.version>
        <msyt-collector-web.version>2.0.0</msyt-collector-web.version>
        <msyt-collector-ext.version>2.0.0</msyt-collector-ext.version>
        <!-- msyt-collector, End -->

        <!-- msyt-manager, Begin -->
        <msyt-manager.version>2.0.0</msyt-manager.version>
        <msyt-manager-api.version>2.0.0</msyt-manager-api.version>
        <msyt-manager-common.version>2.0.0</msyt-manager-common.version>
        <msyt-manager-dao.version>2.0.0</msyt-manager-dao.version>
        <msyt-manager-interface.version>2.0.0</msyt-manager-interface.version>
        <msyt-manager-pojo.version>2.0.0</msyt-manager-pojo.version>
        <msyt-manager-service.version>2.0.0</msyt-manager-service.version>
        <msyt-manager-web.version>2.0.0</msyt-manager-web.version>
        <msyt-manager-ext.version>2.0.0</msyt-manager-ext.version>
        <!-- msyt-manager, End -->

        <!-- msyt-auth, Begin -->
        <msyt-auth.version>2.0.0</msyt-auth.version>
        <msyt-auth-api.version>2.0.0</msyt-auth-api.version>
        <msyt-auth-common.version>2.0.0</msyt-auth-common.version>
        <msyt-auth-dao.version>2.0.0</msyt-auth-dao.version>
        <msyt-auth-interface.version>2.0.0</msyt-auth-interface.version>
        <msyt-auth-pojo.version>2.0.0</msyt-auth-pojo.version>
        <msyt-auth-service.version>2.0.0</msyt-auth-service.version>
        <msyt-auth-web.version>2.0.0</msyt-auth-web.version>
        <msyt-auth-ext.version>2.0.0</msyt-auth-ext.version>
        <!-- msyt-auth, End -->

        <!-- msyt-search, Begin -->
        <msyt-search.version>2.0.0</msyt-search.version>
        <msyt-search-api.version>2.0.0</msyt-search-api.version>
        <msyt-search-common.version>2.0.0</msyt-search-common.version>
        <msyt-search-dao.version>2.0.0</msyt-search-dao.version>
        <msyt-search-interface.version>2.0.0</msyt-search-interface.version>
        <msyt-search-pojo.version>2.0.0</msyt-search-pojo.version>
        <msyt-search-service.version>2.0.0</msyt-search-service.version>
        <msyt-search-web.version>2.0.0</msyt-search-web.version>
        <msyt-search-ext.version>2.0.0</msyt-search-ext.version>
        <!-- msyt-search, End -->

        <!-- msyt-sso, Begin -->
        <msyt-sso.version>2.0.0</msyt-sso.version>
        <msyt-sso-api.version>2.0.0</msyt-sso-api.version>
        <msyt-sso-common.version>2.0.0</msyt-sso-common.version>
        <msyt-sso-dao.version>2.0.0</msyt-sso-dao.version>
        <msyt-sso-interface.version>2.0.0</msyt-sso-interface.version>
        <msyt-sso-pojo.version>2.0.0</msyt-sso-pojo.version>
        <msyt-sso-service.version>2.0.0</msyt-sso-service.version>
        <msyt-sso-web.version>2.0.0</msyt-sso-web.version>
        <msyt-sso-ext.version>2.0.0</msyt-sso-ext.version>
        <!-- msyt-sso, End -->

        <!-- msyt-fileresource, Begin -->
        <msyt-fileresource.version>2.0.0</msyt-fileresource.version>
        <msyt-fileresource-api.version>2.0.0</msyt-fileresource-api.version>
        <msyt-fileresource-common.version>2.0.0</msyt-fileresource-common.version>
        <msyt-fileresource-dao.version>2.0.0</msyt-fileresource-dao.version>
        <msyt-fileresource-interface.version>2.0.0</msyt-fileresource-interface.version>
        <msyt-fileresource-pojo.version>2.0.0</msyt-fileresource-pojo.version>
        <msyt-fileresource-service.version>2.0.0</msyt-fileresource-service.version>
        <msyt-fileresource-web.version>2.0.0</msyt-fileresource-web.version>
        <msyt-fileresource-ext.version>2.0.0</msyt-fileresource-ext.version>
        <!-- msyt-fileresource, End -->

        <!-- msyt-log, Begin -->
        <msyt-log.version>2.0.0</msyt-log.version>
        <msyt-log-api.version>2.0.0</msyt-log-api.version>
        <msyt-log-common.version>2.0.0</msyt-log-common.version>
        <msyt-log-dao.version>2.0.0</msyt-log-dao.version>
        <msyt-log-interface.version>2.0.0</msyt-log-interface.version>
        <msyt-log-pojo.version>2.0.0</msyt-log-pojo.version>
        <msyt-log-service.version>2.0.0</msyt-log-service.version>
        <msyt-log-web.version>2.0.0</msyt-log-web.version>
        <msyt-log-ext.version>2.0.0</msyt-log-ext.version>
        <!-- msyt-log, End -->

        <!-- msyt-vipmember, Begin -->
        <msyt-vipmember.version>2.0.0</msyt-vipmember.version>
        <msyt-vipmember-api.version>2.0.0</msyt-vipmember-api.version>
        <msyt-vipmember-common.version>2.0.0</msyt-vipmember-common.version>
        <msyt-vipmember-dao.version>2.0.0</msyt-vipmember-dao.version>
        <msyt-vipmember-interface.version>2.0.0</msyt-vipmember-interface.version>
        <msyt-vipmember-pojo.version>2.0.0</msyt-vipmember-pojo.version>
        <msyt-vipmember-service.version>2.0.0</msyt-vipmember-service.version>
        <msyt-vipmember-web.version>2.0.0</msyt-vipmember-web.version>
        <msyt-vipmember-ext.version>2.0.0</msyt-vipmember-ext.version>
        <!-- msyt-vipmember, End -->

        <!-- msyt-content, Begin -->
        <msyt-content.version>2.0.0</msyt-content.version>
        <msyt-content-api.version>2.0.0</msyt-content-api.version>
        <msyt-content-common.version>2.0.0</msyt-content-common.version>
        <msyt-content-dao.version>2.0.0</msyt-content-dao.version>
        <msyt-content-interface.version>2.0.0</msyt-content-interface.version>
        <msyt-content-pojo.version>2.0.0</msyt-content-pojo.version>
        <msyt-content-service.version>2.0.0</msyt-content-service.version>
        <msyt-content-web.version>2.0.0</msyt-content-web.version>
        <msyt-content-ext.version>2.0.0</msyt-content-ext.version>
        <!-- msyt-content, End -->

        <!-- msyt-system, Begin -->
        <msyt-system.version>2.0.0</msyt-system.version>
        <msyt-system-api.version>2.0.0</msyt-system-api.version>
        <msyt-system-common.version>2.0.0</msyt-system-common.version>
        <msyt-system-dao.version>2.0.0</msyt-system-dao.version>
        <msyt-system-interface.version>2.0.0</msyt-system-interface.version>
        <msyt-system-pojo.version>2.0.0</msyt-system-pojo.version>
        <msyt-system-service.version>2.0.0</msyt-system-service.version>
        <msyt-system-web.version>2.0.0</msyt-system-web.version>
        <msyt-system-ext.version>2.0.0</msyt-system-ext.version>
        <!-- msyt-system, End -->

        <!-- msyt-security, Begin -->
        <msyt-security.version>2.0.0</msyt-security.version>
        <msyt-security-api.version>2.0.0</msyt-security-api.version>
        <msyt-security-common.version>2.0.0</msyt-security-common.version>
        <msyt-security-dao.version>2.0.0</msyt-security-dao.version>
        <msyt-security-interface.version>2.0.0</msyt-security-interface.version>
        <msyt-security-pojo.version>2.0.0</msyt-security-pojo.version>
        <msyt-security-service.version>2.0.0</msyt-security-service.version>
        <msyt-security-web.version>2.0.0</msyt-security-web.version>
        <msyt-security-ext.version>2.0.0</msyt-security-ext.version>
        <!-- msyt-security, End -->

        <!-- msyt-cache, Begin -->
        <msyt-cache.version>2.0.0</msyt-cache.version>
        <msyt-cache-api.version>2.0.0</msyt-cache-api.version>
        <msyt-cache-common.version>2.0.0</msyt-cache-common.version>
        <msyt-cache-dao.version>2.0.0</msyt-cache-dao.version>
        <msyt-cache-interface.version>2.0.0</msyt-cache-interface.version>
        <msyt-cache-pojo.version>2.0.0</msyt-cache-pojo.version>
        <msyt-cache-service.version>2.0.0</msyt-cache-service.version>
        <msyt-cache-web.version>2.0.0</msyt-cache-web.version>
        <msyt-cache-ext.version>2.0.0</msyt-cache-ext.version>
        <!-- msyt-cache, End -->

        <!-- msyt-logistics, Begin -->
        <msyt-logistics.version>2.0.0</msyt-logistics.version>
        <msyt-logistics-api.version>2.0.0</msyt-logistics-api.version>
        <msyt-logistics-common.version>2.0.0</msyt-logistics-common.version>
        <msyt-logistics-dao.version>2.0.0</msyt-logistics-dao.version>
        <msyt-logistics-interface.version>2.0.0</msyt-logistics-interface.version>
        <msyt-logistics-pojo.version>2.0.0</msyt-logistics-pojo.version>
        <msyt-logistics-service.version>2.0.0</msyt-logistics-service.version>
        <msyt-logistics-web.version>2.0.0</msyt-logistics-web.version>
        <msyt-logistics-ext.version>2.0.0</msyt-logistics-ext.version>
        <!-- msyt-logistics, End -->

        <!-- msyt-warehouse, Begin -->
        <msyt-warehouse.version>2.0.0</msyt-warehouse.version>
        <msyt-warehouse-api.version>2.0.0</msyt-warehouse-api.version>
        <msyt-warehouse-common.version>2.0.0</msyt-warehouse-common.version>
        <msyt-warehouse-dao.version>2.0.0</msyt-warehouse-dao.version>
        <msyt-warehouse-interface.version>2.0.0</msyt-warehouse-interface.version>
        <msyt-warehouse-pojo.version>2.0.0</msyt-warehouse-pojo.version>
        <msyt-warehouse-service.version>2.0.0</msyt-warehouse-service.version>
        <msyt-warehouse-web.version>2.0.0</msyt-warehouse-web.version>
        <msyt-warehouse-ext.version>2.0.0</msyt-warehouse-ext.version>
        <!-- msyt-warehouse, End -->

        <!-- msyt-thirdplatform, Begin -->
        <msyt-thirdplatform.version>2.0.0</msyt-thirdplatform.version>
        <msyt-thirdplatform-api.version>2.0.0</msyt-thirdplatform-api.version>
        <msyt-thirdplatform-common.version>2.0.0</msyt-thirdplatform-common.version>
        <msyt-thirdplatform-dao.version>2.0.0</msyt-thirdplatform-dao.version>
        <msyt-thirdplatform-interface.version>2.0.0</msyt-thirdplatform-interface.version>
        <msyt-thirdplatform-pojo.version>2.0.0</msyt-thirdplatform-pojo.version>
        <msyt-thirdplatform-service.version>2.0.0</msyt-thirdplatform-service.version>
        <msyt-thirdplatform-web.version>2.0.0</msyt-thirdplatform-web.version>
        <msyt-thirdplatform-ext.version>2.0.0</msyt-thirdplatform-ext.version>
        <!-- msyt-thirdplatform, End -->

        <!-- 当前项目所有工程版本号, End -->

        <!-- 第三方框架 Begin -->

        <!-- JDK 版本号 -->
        <jdk.version>1.8</jdk.version>

        <junit.version>4.12</junit.version>
        <!-- <spring.version>4.1.3.RELEASE</spring.version> -->
        <!-- 4.3.2 版本和其他框架冲突，报错： 出错啦！！！ org.springframework.web.util.NestedServletException:
            Handler dispatch failed; nested exception is java.lang.NoSuchMethodError:
            com.fasterxml.jackson.databind.ObjectWriter.forType(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/ObjectWriter
            报错： nested exception is java.lang.NoSuchMethodError: com.fasterxml.jackson.databind.ObjectWriter.forType(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/ObjectWriter -->
        <spring.version>4.3.5.RELEASE</spring.version>
        <mybatis.version>3.4.1</mybatis.version>
        <!-- 3.4.1 , 3.4.0 <mybatis.version>3.2.8</mybatis.version> -->
        <!-- <mybatis.spring.version>1.2.2</mybatis.spring.version> -->
        <mybatis.spring.version>1.3.0</mybatis.spring.version>
        <mybatis.paginator.version>1.2.17</mybatis.paginator.version>
        <!-- <mybatis.paginator.version>1.2.15</mybatis.paginator.version> -->
        <!--<mysql.version>5.1.32</mysql.version>-->
        <mysql.version>6.0.3</mysql.version>
        <slf4j.version>1.6.4</slf4j.version>
        <!-- <jackson.version>2.4.2</jackson.version> -->
        <jackson.version>2.8.5</jackson.version>
        <!-- <jackson.version>2.8.1</jackson.version> -->
        <!--<druid.version>1.0.27</druid.version>-->
        <!-- 很卡 ，1.1.0  -->
        <!--<druid.version>1.1.0</druid.version>-->
        <druid.version>1.0.29</druid.version>
        <!-- <druid.version>1.0.9</druid.version> -->
        <!-- <httpclient.version>4.3.5</httpclient.version> -->
        <httpclient.version>4.5.2</httpclient.version>
        <jstl.version>1.2</jstl.version>
        <javax.servlet-api.version>3.1.0</javax.servlet-api.version>
        <javax.servlet.jsp-api.version>2.3.1</javax.servlet.jsp-api.version>
        <joda-time.version>2.5</joda-time.version>
        <commons-lang3.version>3.5</commons-lang3.version>
        <!-- <commons-lang3.version>3.3.2</commons-lang3.version> -->
        <!-- Apache 的 commons-io , 2012年已经不更新了 -->

        <!-- 使用 commons-io 的 commons-io  -->
        <commons-io.version>2.5</commons-io.version>
        <commons-net.version>3.3</commons-net.version>
        <!-- <pagehelper.version>3.4.2-fix</pagehelper.version> -->
        <!-- <pagehelper.version>4.1.6</pagehelper.version> -->
        <!-- 4.2.1 存在BUG：分页的时候，先执行 select，然后再执行分页  -->
        <!-- <pagehelper.version>4.2.1</pagehelper.version>-->
        <!-- 怎么从4.X升级到5.0，还能继续使用排序？https://github.com/abel533/OrderByHelper -->
        <pagehelper.version>5.0.3</pagehelper.version>
        <!-- pagehelper 5.x 把排序独立拆出来 -->
        <orderby-helper.version>0.0.2</orderby-helper.version>
        <!-- <jsqlparser.version>0.9.1</jsqlparser.version> -->
        <commons-fileupload.version>1.3.1</commons-fileupload.version>
        <!-- 1.3.2 报错 -->
        <!-- <commons-fileupload.version>1.3.2</commons-fileupload.version> -->
        <!-- <jedis.version>2.7.2</jedis.version> -->
        <jedis.version>2.9.0</jedis.version>
        <!--2.5.3 , dubbox : 2.8.4 -->
        <dubbo.version>2.8.4</dubbo.version>
        <zookeeper.version>3.4.8</zookeeper.version>
        <zkclient.version>0.9</zkclient.version>
        <freemarker.version>2.3.23</freemarker.version>
        <quartz.version>2.2.3</quartz.version>
        <!-- <shiro.version>1.2.5</shiro.version> -->
        <shiro-all.version>1.3.2</shiro-all.version>

        <!-- 有可能和Spring ， SpringMVC 框架中的依赖冲突，因为Spring，SpringMVC 已经依赖了 -->
        <commons-codec.version>1.9</commons-codec.version>

        <!-- 1.0.1 报错：java.io.FileNotFoundException: .\log\2017-04-06\info.log (另一个程序正在使用此文件，进程无法访问。)  -->
        <flogger.version>1.0.2</flogger.version>

        <!-- 阿里云，Begin -->
        <aliyun-sdk-oss.version>2.5.0</aliyun-sdk-oss.version>
        <ons-client.version>1.2.7.Final</ons-client.version>
        <aliyun-java-sdk-core.version>3.2.2</aliyun-java-sdk-core.version>
        <!-- 阿里云，End -->

        <jaxrpc.version>1.1</jaxrpc.version>
        <!-- POI -->
        <poi-ooxml-schemas.version>3.15</poi-ooxml-schemas.version>
        <poi-ooxml.version>3.15</poi-ooxml.version>
        <poi.version>3.15</poi.version>

        <commons-httpclient.version>3.1</commons-httpclient.version>
        <axis.version>1.4</axis.version>
        <wsdl4j.version>1.6.3</wsdl4j.version>
        <commons-discovery.version>0.5</commons-discovery.version>
        <!-- 报错： 3.2.2 ， java.lang.RuntimeException: java.io.IOException: invalid constant type: 18 -->
        <!-- <cglib.version>3.2.2</cglib.version> -->
        <cglib.version>3.2.3</cglib.version>
        <commons-collections4.version>4.1</commons-collections4.version>

        <aspectjweaver.version>1.8.9</aspectjweaver.version>
        <urlrewritefilter.version>4.0.4</urlrewritefilter.version>
        <dom4j.version>1.6.1</dom4j.version>

        <!-- 2.8.0 报错 -->
        <!-- <gson.version>2.8.0</gson.version> -->
        <gson.version>2.7</gson.version>
        <!-- <gson.version>2.8.0</gson.version> -->

        <!-- 阿里巴巴 Json解析框架 -->
        <fastjson.version>1.2.30</fastjson.version>

        <!-- HTTP 请求框架， OkHttp , Retrofit2网络层处理 使用OKHTTP3处理 -->
        <!--<okhttp.version>3.5.0</okhttp.version>-->

        <!-- Apache Curator ，High-level API that greatly simplifies using ZooKeeper -->
        <!-- 3.2.0 有问题！！！ -->
        <!-- Versions The are currently two released versions of Curator, 2.x.x
            and 3.x.x: Curator 2.x.x - compatible with both ZooKeeper 3.4.x and ZooKeeper
            3.5.x Curator 3.x.x - compatible only with ZooKeeper 3.5.x and includes support
            for new features such as dynamic reconfiguration, etc. -->
        <curator-framework.version>2.11.1</curator-framework.version>
        <curator-client.version>2.11.1</curator-client.version>
        <curator-recipes.version>2.11.1</curator-recipes.version>

        <!-- Google Guava -->
        <!-- 20.0 ， 19.0 报错！！！ -->
        <guava.version>18.0</guava.version>

        <!-- 1.10.2 报错 -->
        <jsoup.version>1.9.2</jsoup.version>

        <!-- <javassist.version>3.20.0-GA</javassist.version> -->
        <!-- <version>3.22.0-CR1</version>

        3.21.0-GA
          -->
        <javassist.version>3.21.0-GA</javassist.version>

        <!-- elasticsearch -->
        <elasticsearch.version>5.2.1</elasticsearch.version>

        <log4j-api.version>2.8.2</log4j-api.version>
        <log4j-core.version>2.8.2</log4j-core.version>

        <kryo.version>2.24.0</kryo.version>

        <kryo-serializers.version>0.41</kryo-serializers.version>

        <!-- hibernate-validator -->
        <validation-api.version>1.1.0.Final</validation-api.version>
        <hibernate-validator.version>5.4.1.Final</hibernate-validator.version>
        <el-api.version>3.0.1-b08</el-api.version>

        <jpinyin.version>1.1.8</jpinyin.version>

        <!-- javax.mail -->
        <mail-api.version>1.5.6</mail-api.version>

        <!-- FastDFS -->
        <fastdfs-client-java.version>1.26</fastdfs-client-java.version>

        <!-- Netty ， Begin
         由于 Netty 5.x 是商业版本，不再开源，但是 5.0.0.Alpha2 新增很多功能，已经代码调整，
         Netty 4.x 和  Netty 5.x 不兼容， 5.0.0.Alpha2 (Mar 03, 2015)，
         4.1.9.Final (Mar 10, 2017) ，由于 Hero 时间方面问题，同时为了更快实现，
         先以5.0.0.Alpha2 (Mar 03, 2015) 来实现 ！！！

            RocketMQ 中使用 Netty： 4.0.36.Final ，由于冲突，因此不能使用 5.0.0.Alpha2

            Elasticsearch 5.2.1 中使用的 Netty ： 4.1.7.Final ，因此必须使用 高版本！！！

             不知道其他服务是否出现问题 ：Dubbo 、 RocketMQ

         -->
        <!--<netty-all.version>5.0.0.Alpha2</netty-all.version>-->

        <!--<netty-all.version>4.0.36.Final</netty-all.version>-->

        <netty-all.version>4.1.7.Final</netty-all.version>

        <!-- 1.3.0.CR9 -->
        <jboss-marshalling.version>1.4.11.Final</jboss-marshalling.version>
        <jboss-marshalling-serial.version>1.4.11.Final</jboss-marshalling-serial.version>
        <!-- Netty , End -->


        <!--
             HTML恶意代码过滤 AntiSamy 它是一个可确保用户输入的HTML/CSS符合应用规范的API。
		换句话讲，这个API可以确保用户无法在HTML中提交恶意代码，
		这些恶意代码提交通常被用于用户输入的个人资料、评论等会被服务端持久化的数据中。
		对Web应用来讲，“恶意代码”通常是指Javascript。
		CSS样式在调用 Javascript引擎的时候也会被认为是恶意代码。
		当然，通常一些“正常”的HTML和CSS也会被用于恶意的目的。
		百度的UEditor富文本编辑，提交的内容可能会被处理掉！！！ 百度的UEditor 也自带这些过滤功能！！！
		 ## Begin
        1.5.3 ## Ok
		 1.5.3-atlassian-1 ## Error
		 1.5.3-atlassian-20  ## Error
		 1.5.5 ## Error
             -->
        <antisamy.version>1.5.5</antisamy.version>
        <antisamy-sample-configs.version>1.5.3</antisamy-sample-configs.version>

        <!--
        Retrofit2网络层处理 使用OKHTTP3处理
        -->
        <retrofit.version>2.2.0</retrofit.version>

        <!-- Apache RocketMQ -->
        <!--<rocketmq-all.version>3.6.2.Final</rocketmq-all.version>-->

        <rocketmq-client.version>3.5.8</rocketmq-client.version>

        <!-- 腾讯云对象存储 -->
        <cos-api.version>4.4</cos-api.version>
        <!-- End -->

        <!-- 第三方框架 End -->

    </properties>

    <!-- dependencyManagement -->
    <dependencyManagement>
        <dependencies>

            <!-- 管理当前项目所有的工程的版本号, Begin -->

            <!-- msyt-parent, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent</artifactId>
                <version>${msyt-parent.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-api</artifactId>
                <version>${msyt-parent-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-common</artifactId>
                <version>${msyt-parent-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-dao</artifactId>
                <version>${msyt-parent-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-interface</artifactId>
                <version>${msyt-parent-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-pojo</artifactId>
                <version>${msyt-parent-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-service</artifactId>
                <version>${msyt-parent-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-web</artifactId>
                <version>${msyt-parent-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-parent-ext</artifactId>
                <version>${msyt-parent-ext.version}</version>
            </dependency>
            <!-- msyt-parent, End -->

            <!-- msyt-member, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member</artifactId>
                <version>${msyt-member.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-api</artifactId>
                <version>${msyt-member-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-common</artifactId>
                <version>${msyt-member-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-dao</artifactId>
                <version>${msyt-member-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-interface</artifactId>
                <version>${msyt-member-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-pojo</artifactId>
                <version>${msyt-member-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-service</artifactId>
                <version>${msyt-member-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-web</artifactId>
                <version>${msyt-member-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-member-ext</artifactId>
                <version>${msyt-member-ext.version}</version>
            </dependency>
            <!-- msyt-member, End -->

            <!-- msyt-commons, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons</artifactId>
                <version>${msyt-commons.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-api</artifactId>
                <version>${msyt-commons-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-common</artifactId>
                <version>${msyt-commons-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-dao</artifactId>
                <version>${msyt-commons-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-interface</artifactId>
                <version>${msyt-commons-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-pojo</artifactId>
                <version>${msyt-commons-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-service</artifactId>
                <version>${msyt-commons-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-web</artifactId>
                <version>${msyt-commons-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-commons-ext</artifactId>
                <version>${msyt-commons-ext.version}</version>
            </dependency>
            <!-- msyt-commons, End -->

            <!-- msyt-collector, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector</artifactId>
                <version>${msyt-collector.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-api</artifactId>
                <version>${msyt-collector-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-common</artifactId>
                <version>${msyt-collector-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-dao</artifactId>
                <version>${msyt-collector-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-interface</artifactId>
                <version>${msyt-collector-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-pojo</artifactId>
                <version>${msyt-collector-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-service</artifactId>
                <version>${msyt-collector-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-web</artifactId>
                <version>${msyt-collector-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-collector-ext</artifactId>
                <version>${msyt-collector-ext.version}</version>
            </dependency>
            <!-- msyt-collector, End -->

            <!-- msyt-user, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user</artifactId>
                <version>${msyt-user.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-api</artifactId>
                <version>${msyt-user-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-common</artifactId>
                <version>${msyt-user-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-dao</artifactId>
                <version>${msyt-user-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-interface</artifactId>
                <version>${msyt-user-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-pojo</artifactId>
                <version>${msyt-user-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-service</artifactId>
                <version>${msyt-user-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-web</artifactId>
                <version>${msyt-user-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-user-ext</artifactId>
                <version>${msyt-user-ext.version}</version>
            </dependency>
            <!-- msyt-user, End -->

            <!-- msyt-item, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item</artifactId>
                <version>${msyt-item.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-api</artifactId>
                <version>${msyt-item-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-common</artifactId>
                <version>${msyt-item-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-dao</artifactId>
                <version>${msyt-item-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-interface</artifactId>
                <version>${msyt-item-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-pojo</artifactId>
                <version>${msyt-item-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-service</artifactId>
                <version>${msyt-item-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-web</artifactId>
                <version>${msyt-item-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-item-ext</artifactId>
                <version>${msyt-item-ext.version}</version>
            </dependency>
            <!-- msyt-item, End -->

            <!-- msyt-auth, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth</artifactId>
                <version>${msyt-auth.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-api</artifactId>
                <version>${msyt-auth-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-common</artifactId>
                <version>${msyt-auth-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-dao</artifactId>
                <version>${msyt-auth-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-interface</artifactId>
                <version>${msyt-auth-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-pojo</artifactId>
                <version>${msyt-auth-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-service</artifactId>
                <version>${msyt-auth-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-web</artifactId>
                <version>${msyt-auth-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-auth-ext</artifactId>
                <version>${msyt-auth-ext.version}</version>
            </dependency>
            <!-- msyt-auth, End -->

            <!-- msyt-manager, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-manager</artifactId>
                <version>${msyt-manager.version}</version>
            </dependency>
            <!-- <dependency> <groupId>cc.msonion.carambola</groupId> <artifactId>msyt-manager-api</artifactId>
                <version>${msyt-manager-api.version}</version> </dependency> -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-manager-common</artifactId>
                <version>${msyt-manager-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-manager-dao</artifactId>
                <version>${msyt-manager-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-manager-interface</artifactId>
                <version>${msyt-manager-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-manager-pojo</artifactId>
                <version>${msyt-manager-pojo.version}</version>
            </dependency>
            <!-- <dependency> <groupId>cc.msonion.carambola</groupId> <artifactId>msyt-manager-service</artifactId>
                <version>${msyt-manager-service.version}</version> </dependency> -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-manager-web</artifactId>
                <version>${msyt-manager-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-manager-ext</artifactId>
                <version>${msyt-manager-ext.version}</version>
            </dependency>
            <!-- msyt-manager, End -->

            <!-- msyt-search, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search</artifactId>
                <version>${msyt-search.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-api</artifactId>
                <version>${msyt-search-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-common</artifactId>
                <version>${msyt-search-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-dao</artifactId>
                <version>${msyt-search-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-interface</artifactId>
                <version>${msyt-search-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-pojo</artifactId>
                <version>${msyt-search-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-service</artifactId>
                <version>${msyt-search-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-web</artifactId>
                <version>${msyt-search-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-search-ext</artifactId>
                <version>${msyt-search-ext.version}</version>
            </dependency>
            <!-- msyt-search, End -->

            <!-- msyt-sso, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso</artifactId>
                <version>${msyt-sso.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-api</artifactId>
                <version>${msyt-sso-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-common</artifactId>
                <version>${msyt-sso-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-dao</artifactId>
                <version>${msyt-sso-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-interface</artifactId>
                <version>${msyt-sso-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-pojo</artifactId>
                <version>${msyt-sso-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-service</artifactId>
                <version>${msyt-sso-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-web</artifactId>
                <version>${msyt-sso-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-sso-ext</artifactId>
                <version>${msyt-sso-ext.version}</version>
            </dependency>
            <!-- msyt-sso, End -->

            <!-- msyt-fileresource, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource</artifactId>
                <version>${msyt-fileresource.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-api</artifactId>
                <version>${msyt-fileresource-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-common</artifactId>
                <version>${msyt-fileresource-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-dao</artifactId>
                <version>${msyt-fileresource-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-interface</artifactId>
                <version>${msyt-fileresource-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-pojo</artifactId>
                <version>${msyt-fileresource-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-service</artifactId>
                <version>${msyt-fileresource-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-web</artifactId>
                <version>${msyt-fileresource-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-fileresource-ext</artifactId>
                <version>${msyt-fileresource-ext.version}</version>
            </dependency>
            <!-- msyt-fileresource, End -->

            <!-- msyt-log, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log</artifactId>
                <version>${msyt-log.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-api</artifactId>
                <version>${msyt-log-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-common</artifactId>
                <version>${msyt-log-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-dao</artifactId>
                <version>${msyt-log-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-interface</artifactId>
                <version>${msyt-log-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-pojo</artifactId>
                <version>${msyt-log-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-service</artifactId>
                <version>${msyt-log-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-web</artifactId>
                <version>${msyt-log-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-log-ext</artifactId>
                <version>${msyt-log-ext.version}</version>
            </dependency>
            <!-- msyt-log, End -->

            <!-- msyt-vipmember, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember</artifactId>
                <version>${msyt-vipmember.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-api</artifactId>
                <version>${msyt-vipmember-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-common</artifactId>
                <version>${msyt-vipmember-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-dao</artifactId>
                <version>${msyt-vipmember-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-interface</artifactId>
                <version>${msyt-vipmember-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-pojo</artifactId>
                <version>${msyt-vipmember-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-service</artifactId>
                <version>${msyt-vipmember-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-web</artifactId>
                <version>${msyt-vipmember-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-vipmember-ext</artifactId>
                <version>${msyt-vipmember-ext.version}</version>
            </dependency>
            <!-- msyt-vipmember, End -->

            <!-- msyt-content, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content</artifactId>
                <version>${msyt-content.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-api</artifactId>
                <version>${msyt-content-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-common</artifactId>
                <version>${msyt-content-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-dao</artifactId>
                <version>${msyt-content-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-interface</artifactId>
                <version>${msyt-content-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-pojo</artifactId>
                <version>${msyt-content-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-service</artifactId>
                <version>${msyt-content-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-web</artifactId>
                <version>${msyt-content-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-content-ext</artifactId>
                <version>${msyt-content-ext.version}</version>
            </dependency>
            <!-- msyt-content, End -->

            <!-- msyt-system, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system</artifactId>
                <version>${msyt-system.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-api</artifactId>
                <version>${msyt-system-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-common</artifactId>
                <version>${msyt-system-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-dao</artifactId>
                <version>${msyt-system-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-interface</artifactId>
                <version>${msyt-system-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-pojo</artifactId>
                <version>${msyt-system-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-service</artifactId>
                <version>${msyt-system-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-web</artifactId>
                <version>${msyt-system-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-system-ext</artifactId>
                <version>${msyt-system-ext.version}</version>
            </dependency>
            <!-- msyt-system, End -->

            <!-- msyt-security, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security</artifactId>
                <version>${msyt-security.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-api</artifactId>
                <version>${msyt-security-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-common</artifactId>
                <version>${msyt-security-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-dao</artifactId>
                <version>${msyt-security-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-interface</artifactId>
                <version>${msyt-security-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-pojo</artifactId>
                <version>${msyt-security-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-service</artifactId>
                <version>${msyt-security-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-web</artifactId>
                <version>${msyt-security-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-security-ext</artifactId>
                <version>${msyt-security-ext.version}</version>
            </dependency>
            <!-- msyt-security, End -->

            <!-- msyt-cache, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache</artifactId>
                <version>${msyt-cache.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-api</artifactId>
                <version>${msyt-cache-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-common</artifactId>
                <version>${msyt-cache-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-dao</artifactId>
                <version>${msyt-cache-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-interface</artifactId>
                <version>${msyt-cache-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-pojo</artifactId>
                <version>${msyt-cache-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-service</artifactId>
                <version>${msyt-cache-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-web</artifactId>
                <version>${msyt-cache-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-cache-ext</artifactId>
                <version>${msyt-cache-ext.version}</version>
            </dependency>
            <!-- msyt-cache, End -->

            <!-- msyt-warehouse, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse</artifactId>
                <version>${msyt-warehouse.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-api</artifactId>
                <version>${msyt-warehouse-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-common</artifactId>
                <version>${msyt-warehouse-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-dao</artifactId>
                <version>${msyt-warehouse-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-interface</artifactId>
                <version>${msyt-warehouse-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-pojo</artifactId>
                <version>${msyt-warehouse-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-service</artifactId>
                <version>${msyt-warehouse-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-web</artifactId>
                <version>${msyt-warehouse-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-warehouse-ext</artifactId>
                <version>${msyt-warehouse-ext.version}</version>
            </dependency>
            <!-- msyt-warehouse, End -->

            <!-- msyt-logistics, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics</artifactId>
                <version>${msyt-logistics.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-api</artifactId>
                <version>${msyt-logistics-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-common</artifactId>
                <version>${msyt-logistics-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-dao</artifactId>
                <version>${msyt-logistics-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-interface</artifactId>
                <version>${msyt-logistics-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-pojo</artifactId>
                <version>${msyt-logistics-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-service</artifactId>
                <version>${msyt-logistics-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-web</artifactId>
                <version>${msyt-logistics-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-logistics-ext</artifactId>
                <version>${msyt-logistics-ext.version}</version>
            </dependency>
            <!-- msyt-logistics, End -->

            <!-- msyt-thirdplatform, Begin -->
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform</artifactId>
                <version>${msyt-thirdplatform.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-api</artifactId>
                <version>${msyt-thirdplatform-api.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-common</artifactId>
                <version>${msyt-thirdplatform-common.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-dao</artifactId>
                <version>${msyt-thirdplatform-dao.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-interface</artifactId>
                <version>${msyt-thirdplatform-interface.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-pojo</artifactId>
                <version>${msyt-thirdplatform-pojo.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-service</artifactId>
                <version>${msyt-thirdplatform-service.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-web</artifactId>
                <version>${msyt-thirdplatform-web.version}</version>
            </dependency>
            <dependency>
                <groupId>cc.msonion.carambola</groupId>
                <artifactId>msyt-thirdplatform-ext</artifactId>
                <version>${msyt-thirdplatform-ext.version}</version>
            </dependency>
            <!-- msyt-thirdplatform, End -->

            <!-- 管理当前项目所有的工程的版本号, End -->


            <!-- 管理第三方框架 Begin -->

            <!-- 阿里云 -->
            <dependency>
                <groupId>com.aliyun.oss</groupId>
                <artifactId>aliyun-sdk-oss</artifactId>
                <version>${aliyun-sdk-oss.version}</version>
            </dependency>
            <dependency>
                <groupId>com.aliyun.openservices</groupId>
                <artifactId>ons-client</artifactId>
                <version>${ons-client.version}</version>
            </dependency>
            <dependency>
                <groupId>com.aliyun</groupId>
                <artifactId>aliyun-java-sdk-core</artifactId>
                <version>${aliyun-java-sdk-core.version}</version>
            </dependency>

            <!-- 时间操作组件 -->
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>${joda-time.version}</version>
            </dependency>
            <!-- Apache工具组件 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons-lang3.version}</version>
            </dependency>
            <!-- 全部统一使用 commons-io 的 commons-io -->
            <!--<dependency>-->
            <!--<groupId>org.apache.commons</groupId>-->
            <!--<artifactId>commons-io</artifactId>-->
            <!--<version>${commons-io.version}</version>-->
            <!--</dependency>-->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${commons-io.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-net</groupId>
                <artifactId>commons-net</artifactId>
                <version>${commons-net.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons-collections4.version}</version>
            </dependency>

            <!-- cglib -->
            <dependency>
                <groupId>cglib</groupId>
                <artifactId>cglib</artifactId>
                <version>${cglib.version}</version>
            </dependency>

            <!-- Jackson Json处理工具包，SpringMVC 中默认就是使用 Jackson 解析Json -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <!-- httpclient -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${httpclient.version}</version>
            </dependency>

            <!-- quartz任务调度框架 -->
            <dependency>
                <groupId>org.quartz-scheduler</groupId>
                <artifactId>quartz</artifactId>
                <version>${quartz.version}</version>
            </dependency>

            <!-- 单元测试 -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <!--<scope>test</scope>-->
            </dependency>

            <!-- 日志处理 -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <!-- Mybatis -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis.spring.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.miemiedev</groupId>
                <artifactId>mybatis-paginator</artifactId>
                <version>${mybatis.paginator.version}</version>
            </dependency>

            <!-- Mybatis 分页插件 -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper</artifactId>
                <version>${pagehelper.version}</version>
            </dependency>
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>orderby-helper</artifactId>
                <version>${orderby-helper.version}</version>
            </dependency>

            <!-- MySql -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>

            <!-- 连接池，阿里巴巴开源的JDBC 连接池，比 C3P0，DBCP等等都强大，全球最好，最强大的 连接池，网上测试过 ，比较过各种连接池的性能！！！ -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- Spring -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jms</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context-support</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- Spring tx -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aop</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <!-- 不要使用！！！ <dependency> <groupId>org.springframework</groupId> <artifactId>spring-orm</artifactId>
                <version>${spring.version}</version> </dependency> -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-test</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${aspectjweaver.version}</version>
            </dependency>

            <!-- urlrewritefilter -->
            <dependency>
                <groupId>org.tuckey</groupId>
                <artifactId>urlrewritefilter</artifactId>
                <version>${urlrewritefilter.version}</version>
            </dependency>

            <!-- dom4j -->
            <dependency>
                <groupId>dom4j</groupId>
                <artifactId>dom4j</artifactId>
                <version>${dom4j.version}</version>
            </dependency>

            <!-- JSP相关 -->
            <dependency>
                <groupId>jstl</groupId>
                <artifactId>jstl</artifactId>
                <version>${jstl.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax.servlet-api.version}</version>
                <!-- Servlet 的 scope配置成 provided，编译，测试，运行使用，打包不包含进去，因为Tomcat中已经包含， 如果打包再包含进去，可能导致冲突报错！！！ -->
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>javax.servlet.jsp</groupId>
                <artifactId>javax.servlet.jsp-api</artifactId>
                <version>${javax.servlet.jsp-api.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- 文件上传组件，报错！！！ -->
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>${commons-fileupload.version}</version>
            </dependency>

            <!-- Redis客户端 -->
            <dependency>
                <groupId>redis.clients</groupId>
                <artifactId>jedis</artifactId>
                <version>${jedis.version}</version>
            </dependency>

            <!-- Dubbo相关 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>dubbo</artifactId>
                <version>${dubbo.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.httpcomponents</groupId>
                        <artifactId>httpcore</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.zookeeper</groupId>
                <artifactId>zookeeper</artifactId>
                <version>${zookeeper.version}</version>
            </dependency>
            <!-- <dependency> <groupId>com.github.sgroschupf</groupId> <artifactId>zkclient</artifactId>
                <version>${zkclient.version}</version> </dependency> -->
            <dependency>
                <groupId>com.101tec</groupId>
                <artifactId>zkclient</artifactId>
                <version>${zkclient.version}</version>
            </dependency>

            <!-- Freemarker -->
            <dependency>
                <groupId>org.freemarker</groupId>
                <artifactId>freemarker</artifactId>
                <version>${freemarker.version}</version>
            </dependency>

            <!-- 加密解密，安全相关，有可能和Spring框架冲突，因为Spring框架中已经依赖了 -->
            <dependency>
                <groupId>commons-codec</groupId>
                <artifactId>commons-codec</artifactId>
                <version>${commons-codec.version}</version>
            </dependency>

            <!-- Shiro -->
            <!-- <dependency> <groupId>org.apache.shiro</groupId> <artifactId>shiro-core</artifactId>
                <version>${shiro.version}</version> <exclusions> <exclusion> <artifactId>slf4j-api</artifactId>
                <groupId>org.slf4j</groupId> </exclusion> </exclusions> </dependency> <dependency>
                <groupId>org.apache.shiro</groupId> <artifactId>shiro-web</artifactId> <version>shiro.version</version>
                </dependency> <dependency> <groupId>org.apache.shiro</groupId> <artifactId>shiro-spring</artifactId>
                <version>shiro.version</version> </dependency> -->

            <!-- shiro-all -->
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-all</artifactId>
                <version>${shiro-all.version}</version>
            </dependency>

            <!-- 基于双缓冲队列、多刷盘机制的超轻量级 Java 日志 -->
            <dependency>
                <groupId>com.github.cyfonly</groupId>
                <artifactId>flogger</artifactId>
                <version>${flogger.version}</version>
            </dependency>

            <dependency>
                <groupId>commons-discovery</groupId>
                <artifactId>commons-discovery</artifactId>
                <version>${commons-discovery.version}</version>
            </dependency>
            <dependency>
                <groupId>wsdl4j</groupId>
                <artifactId>wsdl4j</artifactId>
                <version>${wsdl4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.axis</groupId>
                <artifactId>axis</artifactId>
                <version>${axis.version}</version>
            </dependency>
            <dependency>
                <groupId>javax.xml</groupId>
                <artifactId>jaxrpc</artifactId>
                <version>${jaxrpc.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-httpclient</groupId>
                <artifactId>commons-httpclient</artifactId>
                <version>${commons-httpclient.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>${poi.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml</artifactId>
                <version>${poi-ooxml.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi-ooxml-schemas</artifactId>
                <version>${poi-ooxml-schemas.version}</version>
            </dependency>

            <!-- 阿里巴巴 Json解析框架 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!-- Google Json解析框架，报错！！！ -->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
            </dependency>

            <!-- HTTP请求框架， OkHttp , Retrofit2网络层处理 使用OKHTTP3处理 -->
            <!--<dependency>-->
            <!--<groupId>com.squareup.okhttp3</groupId>-->
            <!--<artifactId>okhttp</artifactId>-->
            <!--<version>${okhttp.version}</version>-->
            <!--</dependency>-->

            <!-- High-level API that greatly simplifies using ZooKeeper -->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${curator-framework.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-client</artifactId>
                <version>${curator-client.version}</version>
            </dependency>


            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>${curator-recipes.version}</version>
            </dependency>

            <!-- Guava is a suite of core and expanded libraries that include utility
                classes, google's collections, io classes, and much much more. Guava has
                only one code dependency - javax.annotation, per the JSR-305 spec. -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>

            <!-- jsoup is a Java library for working with real-world HTML. It provides
                a very convenient API for extracting and manipulating data, using the best
                of DOM, CSS, and jquery-like methods. -->
            <dependency>
                <groupId>org.jsoup</groupId>
                <artifactId>jsoup</artifactId>
                <version>${jsoup.version}</version>
            </dependency>

            <dependency>
                <groupId>org.javassist</groupId>
                <artifactId>javassist</artifactId>
                <version>${javassist.version}</version>
            </dependency>

            <!-- ElasticSearch ## Begin -->
            <dependency>
                <groupId>org.elasticsearch</groupId>
                <artifactId>elasticsearch</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>

            <dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>transport</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>

            <!-- add the x-pack jar as a dependency -->
            <!--<dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>x-pack-transport</artifactId>
                <version>${elasticsearch.version}</version>
            </dependency>-->

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j-core.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j-api.version}</version>
            </dependency>

            <!-- ElasticSearch ## End -->

            <!-- DubboX , Begin -->

            <dependency>
                <groupId>com.esotericsoftware.kryo</groupId>
                <artifactId>kryo</artifactId>
                <version>${kryo.version}</version>
            </dependency>
            <dependency>
                <groupId>de.javakaffee</groupId>
                <artifactId>kryo-serializers</artifactId>
                <version>${kryo-serializers.version}</version>
            </dependency>

            <!-- DubboX , End -->

            <!-- hibernate-validator , begin -->
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>${validation-api.version}</version>
            </dependency>

            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>${hibernate-validator.version}</version>
            </dependency>

            <dependency>
                <groupId>org.glassfish</groupId>
                <artifactId>javax.el</artifactId>
                <version>${el-api.version}</version>
            </dependency>


            <!-- hibernate-validator , End -->

            <!-- JPinyin是一个汉字转拼音的Java开源类库
                https://github.com/stuxuhai/jpinyin
            -->
            <dependency>
                <groupId>com.github.stuxuhai</groupId>
                <artifactId>jpinyin</artifactId>
                <version>${jpinyin.version}</version>
            </dependency>

            <!-- javax.mail -->
            <dependency>
                <groupId>javax.mail</groupId>
                <artifactId>javax.mail-api</artifactId>
                <version>${mail-api.version}</version>
            </dependency>

            <!-- JAVA SE环境如要导入，版本号保持一致 -->
            <dependency>
                <groupId>com.sun.mail</groupId>
                <artifactId>javax.mail</artifactId>
                <version>${mail-api.version}</version>
            </dependency>


            <!-- FastDFS Client Java
              FastDFS is an open source high performance distributed file system (DFS). It's major functions include: file storing, file syncing and file accessing, and design for high capacity and load balance.
              -->
            <dependency>
                <groupId>org.csource</groupId>
                <artifactId>fastdfs-client-java</artifactId>
                <version>${fastdfs-client-java.version}</version>
            </dependency>

            <!-- Netty Begin ，
            Netty是由JBOSS提供的一个java开源框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。
            也就是说，Netty 是一个基于NIO的客户、服务器端编程框架，使用Netty 可以确保你快速和简单的开发出一个网络应用
            ，例如实现了某种协议的客户，服务端应用。
            Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。
            -->
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-all</artifactId>
                <version>${netty-all.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.marshalling</groupId>
                <artifactId>jboss-marshalling</artifactId>
                <version>${jboss-marshalling.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.marshalling</groupId>
                <artifactId>jboss-marshalling-serial</artifactId>
                <version>${jboss-marshalling-serial.version}</version>
            </dependency>
            <!-- Netty End -->

            <!--
             HTML恶意代码过滤 AntiSamy 它是一个可确保用户输入的HTML/CSS符合应用规范的API。
		换句话讲，这个API可以确保用户无法在HTML中提交恶意代码，
		这些恶意代码提交通常被用于用户输入的个人资料、评论等会被服务端持久化的数据中。
		对Web应用来讲，“恶意代码”通常是指Javascript。
		CSS样式在调用 Javascript引擎的时候也会被认为是恶意代码。
		当然，通常一些“正常”的HTML和CSS也会被用于恶意的目的。
		百度的UEditor富文本编辑，提交的内容可能会被处理掉！！！ 百度的UEditor 也自带这些过滤功能！！！
		 ## Begin
             -->

            <dependency>
                <groupId>org.owasp.antisamy</groupId>
                <artifactId>antisamy</artifactId>
                <version>${antisamy.version}</version>
            </dependency>
            <dependency>
                <groupId>org.owasp.antisamy</groupId>
                <artifactId>antisamy-sample-configs</artifactId>
                <version>${antisamy-sample-configs.version}</version>
            </dependency>

            <!--
            Retrofit2网络层处理 使用OKHTTP3处理
            -->
            <dependency>
                <groupId>com.squareup.retrofit2</groupId>
                <artifactId>retrofit</artifactId>
                <version>${retrofit.version}</version>
            </dependency>

            <!-- End -->

            <!--
            Apache RocketMQ is a low latency, reliable, scalable,
            easy to use message oriented middleware born from alibaba massive messaging business.
            -->
            <!--<dependency>-->
            <!--<groupId>com.alibaba.rocketmq</groupId>-->
            <!--<artifactId>rocketmq-all</artifactId>-->
            <!--<version>${rocketmq-all.version}</version>-->
            <!--</dependency>-->
            <dependency>
                <groupId>com.alibaba.rocketmq</groupId>
                <artifactId>rocketmq-client</artifactId>
                <version>${rocketmq-client.version}</version>
            </dependency>

            <dependency>
                <groupId>com.qcloud</groupId>
                <artifactId>cos_api</artifactId>
                <version>${cos-api.version}</version>
            </dependency>
            <!-- 管理第三方框架 End -->

        </dependencies>
    </dependencyManagement>

    <!-- build -->
    <build>
        <finalName>${project.artifactId}</finalName>

        <!-- maven install 跳过test方法 , Begin -->
        <defaultGoal>compile</defaultGoal>
        <!-- maven install 跳过test方法 , End -->

        <plugins>

            <!-- maven install 跳过test方法 , Begin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!-- maven install 跳过test方法 , End -->

            <!-- 资源文件拷贝插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <!--<version>2.7</version>-->
                <version>3.0.2</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <!-- Java编译插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <!--<version>3.2</version>-->
                <version>3.6.1</version>
                <configuration>
                    <!-- <source>1.7</source> -->
                    <source>${jdk.version}</source>
                    <!-- <target>1.7</target> -->
                    <target>${jdk.version}</target>
                    <encoding>UTF-8</encoding>

                    <!-- 加入图像相关类库，Maven编译报错：
             类 JPEGImageDecoder 找不到 ！！！
             -->
                    <compilerArguments>
                        <verbose/>
                        <!-- JAVA_HOME为：C:\Java\jdk1.8.0_65 ， 不需要再包括 \jre 目录，自动加上 \jre目录，
                         如果再到加上，就会重复了，导致路径错误。 -->
                        <bootclasspath>${java.home}\lib\rt.jar;${java.home}\lib\jce.jar</bootclasspath>
                    </compilerArguments>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- 配置Tomcat插件，使用Tomcat插件之后，本地就不需要单独安装Tomcat了 -->
                <plugin>
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.2</version>
                </plugin>
            </plugins>
        </pluginManagement>


    </build>

    <!-- ###################  多套环境，不同环境的配置不同， ## Begin  ################## -->

    <!-- 多环境配置  -->
    <profiles>
        <!-- 开发环境  -->
        <profile>
            <id>dev</id>
            <!-- 必须设置一个环境，否则参数报错，设置为默认激活  -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!-- 不同的环境配置下，使用不同的配置文件夹 -->
                <profile.dir>${resources.dir}/dev</profile.dir>
                <target.env>dev</target.env>


                <!-- ############ Dubbo 服务版本号 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <dubbo.service.logService.version>${dev.version}</dubbo.service.logService.version>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <dubbo.service.cacheService.version>${dev.version}</dubbo.service.cacheService.version>
                <dubbo.service.dynamicCacheService.version>${dev.version}</dubbo.service.dynamicCacheService.version>

                <!-- msyt-cache ## End -->

                <!-- msyt-collector ## Begin -->

                <dubbo.service.collectorItemService.version>${dev.version}</dubbo.service.collectorItemService.version>
                <dubbo.service.collectorItemBiddingService.version>${dev.version}
                </dubbo.service.collectorItemBiddingService.version>
                <dubbo.service.collectorAttributeService.version>${dev.version}
                </dubbo.service.collectorAttributeService.version>
                <dubbo.service.collectorAttributeGroupService.version>${dev.version}
                </dubbo.service.collectorAttributeGroupService.version>
                <dubbo.service.collectorAttributeGroupAttributeService.version>${dev.version}
                </dubbo.service.collectorAttributeGroupAttributeService.version>
                <dubbo.service.collectorItemBrandService.version>${dev.version}
                </dubbo.service.collectorItemBrandService.version>
                <dubbo.service.collectorItemCategoryService.version>${dev.version}
                </dubbo.service.collectorItemCategoryService.version>
                <dubbo.service.collectorItemOriginService.version>${dev.version}
                </dubbo.service.collectorItemOriginService.version>
                <dubbo.service.collectorItemPriceService.version>${dev.version}
                </dubbo.service.collectorItemPriceService.version>
                <dubbo.service.collectorItemCollectionService.version>${dev.version}
                </dubbo.service.collectorItemCollectionService.version>
                <dubbo.service.collectorEditorService.version>${dev.version}
                </dubbo.service.collectorEditorService.version>
                <dubbo.service.collectorItemAttributeService.version>${dev.version}
                </dubbo.service.collectorItemAttributeService.version>
                <dubbo.service.collectorItemHistoryService.version>${dev.version}
                </dubbo.service.collectorItemHistoryService.version>
                <dubbo.service.collectorItemContentService.version>${dev.version}
                </dubbo.service.collectorItemContentService.version>
                <dubbo.service.itemFormalImageLibService.version>${dev.version}
                </dubbo.service.itemFormalImageLibService.version>
                <dubbo.service.itemBarcodeService.version>${dev.version}</dubbo.service.itemBarcodeService.version>
                <dubbo.service.itemAttributeImageService.version>${dev.version}
                </dubbo.service.itemAttributeImageService.version>
                <dubbo.service.itemLogService.version>${dev.version}</dubbo.service.itemLogService.version>
                <dubbo.service.categoryAttributeGroupService.version>${dev.version}</dubbo.service.categoryAttributeGroupService.version>

                <!-- msyt-collector ## End -->

                <!-- msyt-content ## Begin -->
                <dubbo.service.contentService.version>${dev.version}</dubbo.service.contentService.version>
                <dubbo.service.contentKeywordService.version>${dev.version}
                </dubbo.service.contentKeywordService.version>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <dubbo.service.fileResourceDownloadService.version>${dev.version}
                </dubbo.service.fileResourceDownloadService.version>
                <dubbo.service.fileResourceUploadService.version>${dev.version}
                </dubbo.service.fileResourceUploadService.version>
                <dubbo.service.ablumLibService.version>${dev.version}</dubbo.service.ablumLibService.version>
                <dubbo.service.fileResourceTemplateService.version>${dev.version}</dubbo.service.fileResourceTemplateService.version>

                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <dubbo.service.itemOfficialService.version>${dev.version}</dubbo.service.itemOfficialService.version>
                <dubbo.service.itemBasicOfficialService.version>${dev.version}
                </dubbo.service.itemBasicOfficialService.version>
                <dubbo.service.itemCollectionOfficialService.version>${dev.version}
                </dubbo.service.itemCollectionOfficialService.version>
                <dubbo.service.itemBarCodeOfficialService.version>${dev.version}
                </dubbo.service.itemBarCodeOfficialService.version>
                <dubbo.service.itemAttributeOfficialService.version>${dev.version}
                </dubbo.service.itemAttributeOfficialService.version>
                <dubbo.service.itemAttributeImageOfficialService.version>${dev.version}
                </dubbo.service.itemAttributeImageOfficialService.version>
                <dubbo.service.itemPriceOfficialService.version>${dev.version}
                </dubbo.service.itemPriceOfficialService.version>
                <dubbo.service.itemOfficialExtService.version>${dev.version}
                </dubbo.service.itemOfficialExtService.version>

                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <dubbo.service.logisticsCustomsDeclareService.vesion>${dev.version}
                </dubbo.service.logisticsCustomsDeclareService.vesion>
                <dubbo.service.logisticsCustomsDeclareOfficialService.vesion>${dev.version}
                </dubbo.service.logisticsCustomsDeclareOfficialService.vesion>
                <dubbo.service.logisticsUnitService.vesion>${dev.version}
                </dubbo.service.logisticsUnitService.vesion>
                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <dubbo.service.memberService.vesion>${dev.version}</dubbo.service.memberService.vesion>
                <dubbo.service.menuService.vesion>${dev.version}</dubbo.service.menuService.vesion>
                <dubbo.service.buttonService.version>${dev.version}</dubbo.service.buttonService.version>
                <dubbo.service.memberCateService.version>${dev.version}</dubbo.service.memberCateService.version>
                <dubbo.service.roleService.version>${dev.version}</dubbo.service.roleService.version>
                <dubbo.service.memberRoleService.version>${dev.version}</dubbo.service.memberRoleService.version>
                <dubbo.service.departmentService.version>${dev.version}</dubbo.service.departmentService.version>
                <dubbo.service.resourceGroupService.version>${dev.version}</dubbo.service.resourceGroupService.version>
                <dubbo.service.roleResourceGroupService.version>${dev.version}
                </dubbo.service.roleResourceGroupService.version>
                <dubbo.service.resourceService.version>${dev.version}</dubbo.service.resourceService.version>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <dubbo.service.sysDataDictionaryService.vesion>${dev.version}
                </dubbo.service.sysDataDictionaryService.vesion>
                <dubbo.service.sysMemberLoginLogService.vesion>${dev.version}
                </dubbo.service.sysMemberLoginLogService.vesion>
                <dubbo.service.sysConsumeMessageService.vesion>${dev.version}
                </dubbo.service.sysConsumeMessageService.vesion>
                <dubbo.service.sysSettingService.vesion>${dev.version}</dubbo.service.sysSettingService.vesion>
                <dubbo.service.sysVerifyCodePictureService.vesion>${dev.version}</dubbo.service.sysVerifyCodePictureService.vesion>
                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <dubbo.service.warehouseService.version>${dev.version}</dubbo.service.warehouseService.version>
                <dubbo.service.warehouseTypeService.version>${dev.version}</dubbo.service.warehouseTypeService.version>
                <dubbo.service.warehouseOfficialService.version>${dev.version}
                </dubbo.service.warehouseOfficialService.version>

                <!-- msyt-warehouse ### End -->

                <!-- msyt-thirdplatform ## Begin -->

                <dubbo.service.thirdplatform.erpStockService.version>${dev.version}
                </dubbo.service.thirdplatform.erpStockService.version>

                <!-- msyt-thirdplatform ## End -->
                <!-- ############ Dubbo 服务版本号 ## End  ###########  -->

                <!-- ########################### 启动是否检查服务 ## Begin ########################################################## -->

                <!-- ############ Dubbo 服务，启动时是否检查 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.log>${dev.dubbo.consumer.check}</dubbo.consumer.check.log>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.msOnionLog>${dev.dubbo.reference.check}</dubbo.reference.check.msOnionLog>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.cache>${dev.dubbo.consumer.check}</dubbo.consumer.check.cache>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.cacheService>${dev.dubbo.reference.check}</dubbo.reference.check.cacheService>
                <dubbo.reference.check.dynamicCacheService>${dev.dubbo.reference.check}
                </dubbo.reference.check.dynamicCacheService>

                <!-- msyt-cache ## End -->

                <!-- msyt-collector ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.collector>${dev.dubbo.consumer.check}</dubbo.consumer.check.collector>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBiddingService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBiddingService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupAttributeService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBrandService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBrandService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCategoryService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCategoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemOriginService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemOriginService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemPriceService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemPriceService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCollectionService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCollectionService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorEditorService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorEditorService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemAttributeService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemHistoryService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemHistoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemContentService>${dev.dubbo.reference.check}
                </dubbo.reference.check.collectorItemContentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemFormalImageLibService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemFormalImageLibService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBarcodeService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemBarcodeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemLogService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemLogService>

                <dubbo.reference.check.itemAttributeImageService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageService>

                <dubbo.reference.check.categoryAttributeGroupService>${dev.dubbo.reference.check}
                </dubbo.reference.check.categoryAttributeGroupService>

                <!-- msyt-collector ## End -->

                <!-- msyt-content ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.content>${dev.dubbo.consumer.check}</dubbo.consumer.check.content>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentService>${dev.dubbo.reference.check}
                </dubbo.reference.check.contentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentKeywordService>${dev.dubbo.reference.check}
                </dubbo.reference.check.contentKeywordService>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.fileresource>${dev.dubbo.consumer.check}</dubbo.consumer.check.fileresource>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceDownloadService>${dev.dubbo.reference.check}
                </dubbo.reference.check.fileResourceDownloadService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceUploadService>${dev.dubbo.reference.check}
                </dubbo.reference.check.fileResourceUploadService>
                <dubbo.reference.check.fileResourceTemplateService>${dev.dubbo.reference.check}
                </dubbo.reference.check.fileResourceTemplateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.ablumLibService>${dev.dubbo.reference.check}
                </dubbo.reference.check.ablumLibService>


                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.item>${dev.dubbo.consumer.check}</dubbo.consumer.check.item>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBasicOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemBasicOfficialService>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemCollectionOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemCollectionOfficialService>
                <dubbo.reference.check.itemBarCodeOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemBarCodeOfficialService>
                <dubbo.reference.check.itemAttributeImageOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageOfficialService>
                <dubbo.reference.check.itemAttributeOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeOfficialService>
                <dubbo.reference.check.itemPriceOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemPriceOfficialService>
                <dubbo.reference.check.itemOfficialExtService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialExtService>
                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.logistics>${dev.dubbo.consumer.check}</dubbo.consumer.check.logistics>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.logisticsCustomsDeclareService>${dev.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareService>
                <dubbo.reference.check.logisticsCustomsDeclareOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareOfficialService>
                <dubbo.reference.check.logisticsUnitService>${dev.dubbo.reference.check}
                </dubbo.reference.check.logisticsUnitService>

                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.member>${dev.dubbo.consumer.check}</dubbo.consumer.check.member>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberService>${dev.dubbo.reference.check}</dubbo.reference.check.memberService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.menuService>${dev.dubbo.reference.check}</dubbo.reference.check.menuService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.buttonService>${dev.dubbo.reference.check}</dubbo.reference.check.buttonService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberCateService>${dev.dubbo.reference.check}
                </dubbo.reference.check.memberCateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleService>${dev.dubbo.reference.check}</dubbo.reference.check.roleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberRoleService>${dev.dubbo.reference.check}
                </dubbo.reference.check.memberRoleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.departmentService>${dev.dubbo.reference.check}
                </dubbo.reference.check.departmentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceGroupService>${dev.dubbo.reference.check}
                </dubbo.reference.check.resourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleResourceGroupService>${dev.dubbo.reference.check}
                </dubbo.reference.check.roleResourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceService>${dev.dubbo.reference.check}
                </dubbo.reference.check.resourceService>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.system>${dev.dubbo.consumer.check}</dubbo.consumer.check.system>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysDataDictionaryService>${dev.dubbo.reference.check}
                </dubbo.reference.check.sysDataDictionaryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysMemberLoginLogService>${dev.dubbo.reference.check}
                </dubbo.reference.check.sysMemberLoginLogService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysConsumeMessageService>${dev.dubbo.reference.check}
                </dubbo.reference.check.sysConsumeMessageService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysSettingService>${dev.dubbo.reference.check}
                </dubbo.reference.check.sysSettingService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysVerifyCodePictureService>${dev.dubbo.reference.check}
                </dubbo.reference.check.sysVerifyCodePictureService>

                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.warehouse>${dev.dubbo.consumer.check}</dubbo.consumer.check.warehouse>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.warehouseService>${dev.dubbo.reference.check}
                </dubbo.reference.check.warehouseService>
                <dubbo.reference.check.warehouseOfficialService>${dev.dubbo.reference.check}
                </dubbo.reference.check.warehouseOfficialService>

                <!-- msyt-warehouse ### End -->

                <!-- msyt-thirdplatform ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.thirdplatform.erp>${dev.dubbo.consumer.check}
                </dubbo.consumer.check.thirdplatform.erp>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.thirdplatform.erpStockService>${dev.dubbo.reference.check}
                </dubbo.reference.check.thirdplatform.erpStockService>

                <!-- msyt-thirdplatform ## End -->
                <!-- ############ Dubbo 服务，启动时是否检查 ## End  ###########  -->


                <!-- ########################### 启动是否检查服务 ## End  ########################################################## -->


                <!-- ########################## RocketMQ配置 ## Begin ############## -->

                <!-- namesrvAddr -->
                <rocketmq.namesrvAddr>rocketmq01-dev:9876;rocketmq02-dev:9876</rocketmq.namesrvAddr>

                <!-- producerGroup ## Begin -->
                <rocketmq.producerGroup.collectorService>mq-producerGroup-collectorService-dev
                </rocketmq.producerGroup.collectorService>
                <rocketmq.producerGroup.contentService>mq-producerGroup-contentService-dev
                </rocketmq.producerGroup.contentService>
                <rocketmq.producerGroup.fileResourceService>mq-producerGroup-fileResourceService-dev
                </rocketmq.producerGroup.fileResourceService>
                <rocketmq.producerGroup.itemService>mq-producerGroup-itemService-dev
                </rocketmq.producerGroup.itemService>
                <rocketmq.producerGroup.logisticsService>mq-producerGroup-logisticsService-dev
                </rocketmq.producerGroup.logisticsService>
                <rocketmq.producerGroup.memberService>mq-producerGroup-memberService-dev
                </rocketmq.producerGroup.memberService>
                <rocketmq.producerGroup.systemService>mq-producerGroup-systemService-dev
                </rocketmq.producerGroup.systemService>
                <rocketmq.producerGroup.warehouseService>mq-producerGroup-warehouseService-dev
                </rocketmq.producerGroup.warehouseService>
                <!-- producerGroup ## End -->

                <!-- topic -->
                <rocketmq.topic>mq-topic-dev-02</rocketmq.topic>

                <!-- consumerGroup ## Begin -->
                <rocketmq.consumerGroup.systemService>mq-consumerGroup-systemService-dev
                </rocketmq.consumerGroup.systemService>
                <rocketmq.consumerGroup.managerWeb>mq-consumerGroup-managerWeb-dev</rocketmq.consumerGroup.managerWeb>
                <rocketmq.consumerGroup.itemService>mq-consumerGroup-itemService-dev
                </rocketmq.consumerGroup.itemService>
                <rocketmq.consumerGroup.searchService>mq-consumerGroup-searchService-dev
                </rocketmq.consumerGroup.searchService>
                <!-- consumerGroup ## End -->

                <!-- subExpression ## Begin -->
                <!-- subExpression ## * : all, or : Menu@Save || Menu@Update -->
                <rocketmq.consumer.subExpression.systemService>*</rocketmq.consumer.subExpression.systemService>
                <rocketmq.consumer.subExpression.managerWeb>*</rocketmq.consumer.subExpression.managerWeb>
                <rocketmq.consumer.subExpression.itemService>*</rocketmq.consumer.subExpression.itemService>
                <rocketmq.consumer.subExpression.searchService>*</rocketmq.consumer.subExpression.searchService>
                <!-- subExpression ## End -->

                <!-- #####################  RocketMQ配置 ## End  ##################### -->

                <!-- ###################### 日志中心，日志配置 ## Begin ####################### -->

                <flogger.log.path>${dev.flogger.log.path}</flogger.log.path>

                <flogger.log.console.print>${dev.flogger.log.console.print}</flogger.log.console.print>

                <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
                <flogger.log.level>${dev.flogger.log.level}</flogger.log.level>

                <!-- ###################### 日志中心，日志配置 ## End ####################### -->


                <!-- ###################### Redis集群配置 ## Begin ####################### -->

                <!-- 第1个节点 -->
                <redis.cluster.host.node1>${dev.redis.cluster.host.node1}</redis.cluster.host.node1>
                <redis.cluster.port.node1>${dev.redis.cluster.port.node1}</redis.cluster.port.node1>

                <!-- 第2个节点 -->
                <redis.cluster.host.node2>${dev.redis.cluster.host.node2}</redis.cluster.host.node2>
                <redis.cluster.port.node2>${dev.redis.cluster.port.node2}</redis.cluster.port.node2>

                <!-- 第3个节点 -->
                <redis.cluster.host.node3>${dev.redis.cluster.host.node3}</redis.cluster.host.node3>
                <redis.cluster.port.node3>${dev.redis.cluster.port.node3}</redis.cluster.port.node3>

                <!-- ###################### Redis集群配置 ## End  ####################### -->

                <!-- #############################  Zookeeper 集群配置 ## Begin ############################### -->

                <zk.connectString>${dev.zk.connectString}</zk.connectString>

                <!-- #############################  Zookeeper 集群配置 ## End ############################### -->


                <!-- #############################  MySQL、MariaDB 集群配置 ## Begin ############################### -->


                <!-- ########## DruidDataSource ### 配置 ## Begin ##############  -->

                <!-- 开发环境 ### Begin -->
                <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
                <jdbc.initialSize>${dev.jdbc.initialSize}</jdbc.initialSize>
                <!-- 最小连接池数量 -->
                <jdbc.minIdle>${dev.jdbc.minIdle}</jdbc.minIdle>
                <!-- 最大连接池数量 -->
                <jdbc.maxActive>${dev.jdbc.maxActive}</jdbc.maxActive>
                <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.maxWait>${dev.jdbc.maxWait}</jdbc.maxWait>
                <!--
                配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
                有两个含义：
                1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
                <jdbc.timeBetweenEvictionRunsMillis>${dev.jdbc.timeBetweenEvictionRunsMillis}</jdbc.timeBetweenEvictionRunsMillis>
                <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.minEvictableIdleTimeMillis>${dev.jdbc.minEvictableIdleTimeMillis}</jdbc.minEvictableIdleTimeMillis>
                <!-- 开发环境 ### End -->

                <!-- ########## DruidDataSource ### 配置 ## End ##############  -->

                <!-- ### 收集中心： myst-collector ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.collector>${dev.jdbc.url.collector}</jdbc.url.collector>
                <!-- 用户名 -->
                <jdbc.username.collector>${dev.jdbc.username.collector}</jdbc.username.collector>
                <!-- 密码 -->
                <jdbc.password.collector>${dev.jdbc.password.collector}</jdbc.password.collector>
                <!-- 开发环境 ### End -->

                <!-- ### 收集中心： myst-collector ### End ########## -->


                <!-- ### 内容中心： myst-content ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.content>${dev.jdbc.url.content}</jdbc.url.content>
                <!-- 用户名 -->
                <jdbc.username.content>${dev.jdbc.username.content}</jdbc.username.content>
                <!-- 密码 -->
                <jdbc.password.content>${dev.jdbc.password.content}</jdbc.password.content>
                <!-- 开发环境 ### End -->


                <!-- ### 内容中心： myst-content ### End ########## -->

                <!-- ### 文件资源中心： myst-fileresource ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.fileresource>${dev.jdbc.url.fileresource}</jdbc.url.fileresource>
                <!-- 用户名 -->
                <jdbc.username.fileresource>${dev.jdbc.username.fileresource}</jdbc.username.fileresource>
                <!-- 密码 -->
                <jdbc.password.fileresource>${dev.jdbc.password.fileresource}</jdbc.password.fileresource>
                <!-- 开发环境 ### End -->


                <!-- ### 文件资源中心： myst-fileresource ### End ########## -->

                <!-- ### 商品中心： myst-item ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.item>${dev.jdbc.url.item}</jdbc.url.item>
                <!-- 用户名 -->
                <jdbc.username.item>${dev.jdbc.username.item}</jdbc.username.item>
                <!-- 密码 -->
                <jdbc.password.item>${dev.jdbc.password.item}</jdbc.password.item>
                <!-- 开发环境 ### End -->


                <!-- ### 商品中心： myst-item ### End ########## -->

                <!-- ### 物流中心： myst-logistics ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.logistics>${dev.jdbc.url.logistics}</jdbc.url.logistics>
                <!-- 用户名 -->
                <jdbc.username.logistics>${dev.jdbc.username.logistics}</jdbc.username.logistics>
                <!-- 密码 -->
                <jdbc.password.logistics>${dev.jdbc.password.logistics}</jdbc.password.logistics>
                <!-- 开发环境 ### End -->

                <!-- ### 物流中心： myst-logistics ### End ########## -->

                <!-- ### 成员中心： myst-member ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.member>${dev.jdbc.url.member}</jdbc.url.member>
                <!-- 用户名 -->
                <jdbc.username.member>${dev.jdbc.username.member}</jdbc.username.member>
                <!-- 密码 -->
                <jdbc.password.member>${dev.jdbc.password.member}</jdbc.password.member>
                <!-- 开发环境 ### End -->

                <!-- ### 成员中心： myst-member ### End ########## -->

                <!-- ### 系统中心： myst-system ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.system>${dev.jdbc.url.system}</jdbc.url.system>
                <!-- 用户名 -->
                <jdbc.username.system>${dev.jdbc.username.system}</jdbc.username.system>
                <!-- 密码 -->
                <jdbc.password.system>${dev.jdbc.password.system}</jdbc.password.system>
                <!-- 开发环境 ### End -->


                <!-- ### 系统中心： myst-system ### End ########## -->

                <!-- ### 仓库中心： myst-warehouse ### Begin ########## -->

                <!-- 开发环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.warehouse>${dev.jdbc.url.warehouse}</jdbc.url.warehouse>
                <!-- 用户名 -->
                <jdbc.username.warehouse>${dev.jdbc.username.warehouse}</jdbc.username.warehouse>
                <!-- 密码 -->
                <jdbc.password.warehouse>${dev.jdbc.password.warehouse}</jdbc.password.warehouse>
                <!-- 开发环境 ### End -->


                <!-- ### 仓库中心： myst-warehouse ### End ########## -->


                <!-- #############################  MySQL、MariaDB 集群配置 ## End ############################### -->


                <!-- ############ 导入Excel根路径，配置 ## Begin ############################ -->

                <!-- 开发环境 -->
                <excel.import.file.rootDir>${dev.excel.import.file.rootDir}</excel.import.file.rootDir>

                <!-- ############ 导入Excel根路径，配置 ## End ############################ -->

                <!-- ############ 百度富文本编辑临时目录，配置 ## Begin ############################ -->

                <!-- 开发环境 -->
                <ueditor.tmp.dir>${dev.ueditor.tmp.dir}</ueditor.tmp.dir>

                <!-- ############ 百度富文本编辑临时目录，配置 ## End ############################ -->


            </properties>
        </profile>
        <!-- 测试环境  -->
        <profile>
            <id>test</id>
            <!-- 必须设置一个环境，否则参数报错，设置为默认激活  -->
            <!--<activation>
                <activeByDefault>true</activeByDefault>
            </activation>-->
            <properties>
                <profile.dir>${resources.dir}/test</profile.dir>
                <target.env>test</target.env>

                <!-- ############ Dubbo 服务版本号 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <dubbo.service.logService.version>${test.version}</dubbo.service.logService.version>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <dubbo.service.cacheService.version>${test.version}</dubbo.service.cacheService.version>
                <dubbo.service.dynamicCacheService.version>${test.version}</dubbo.service.dynamicCacheService.version>

                <!-- msyt-cache ## End -->

                <!-- msyt-collector ## Begin -->

                <dubbo.service.collectorItemService.version>${test.version}</dubbo.service.collectorItemService.version>
                <dubbo.service.collectorItemBiddingService.version>${test.version}
                </dubbo.service.collectorItemBiddingService.version>
                <dubbo.service.collectorAttributeService.version>${test.version}
                </dubbo.service.collectorAttributeService.version>
                <dubbo.service.collectorAttributeGroupService.version>${test.version}
                </dubbo.service.collectorAttributeGroupService.version>
                <dubbo.service.collectorAttributeGroupAttributeService.version>${test.version}
                </dubbo.service.collectorAttributeGroupAttributeService.version>
                <dubbo.service.collectorItemBrandService.version>${test.version}
                </dubbo.service.collectorItemBrandService.version>
                <dubbo.service.collectorItemCategoryService.version>${test.version}
                </dubbo.service.collectorItemCategoryService.version>
                <dubbo.service.collectorItemOriginService.version>${test.version}
                </dubbo.service.collectorItemOriginService.version>
                <dubbo.service.collectorItemPriceService.version>${test.version}
                </dubbo.service.collectorItemPriceService.version>
                <dubbo.service.collectorItemCollectionService.version>${test.version}
                </dubbo.service.collectorItemCollectionService.version>
                <dubbo.service.collectorEditorService.version>${test.version}
                </dubbo.service.collectorEditorService.version>
                <dubbo.service.collectorItemAttributeService.version>${test.version}
                </dubbo.service.collectorItemAttributeService.version>
                <dubbo.service.collectorItemHistoryService.version>${test.version}
                </dubbo.service.collectorItemHistoryService.version>
                <dubbo.service.collectorItemContentService.version>${test.version}
                </dubbo.service.collectorItemContentService.version>
                <dubbo.service.itemFormalImageLibService.version>${test.version}
                </dubbo.service.itemFormalImageLibService.version>
                <dubbo.service.itemBarcodeService.version>${test.version}</dubbo.service.itemBarcodeService.version>
                <dubbo.service.itemAttributeImageService.version>${test.version}
                </dubbo.service.itemAttributeImageService.version>
                <dubbo.service.itemLogService.version>${test.version}</dubbo.service.itemLogService.version>

                <dubbo.service.categoryAttributeGroupService.version>${test.version}
                </dubbo.service.categoryAttributeGroupService.version>
                <!-- msyt-collector ## End -->

                <!-- msyt-content ### Begin -->

                <dubbo.service.contentService.version>${test.version}</dubbo.service.contentService.version>
                <dubbo.service.contentKeywordService.version>${test.version}
                </dubbo.service.contentKeywordService.version>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <dubbo.service.fileResourceDownloadService.version>${test.version}
                </dubbo.service.fileResourceDownloadService.version>
                <dubbo.service.fileResourceUploadService.version>${test.version}
                </dubbo.service.fileResourceUploadService.version>
                <dubbo.service.ablumLibService.version>${test.version}</dubbo.service.ablumLibService.version>
                <dubbo.service.fileResourceTemplateService.version>${test.version}</dubbo.service.fileResourceTemplateService.version>

                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <dubbo.service.itemOfficialService.version>${test.version}</dubbo.service.itemOfficialService.version>
                <dubbo.service.itemBasicOfficialService.version>${test.version}
                </dubbo.service.itemBasicOfficialService.version>
                <dubbo.service.itemCollectionOfficialService.version>${test.version}
                </dubbo.service.itemCollectionOfficialService.version>
                <dubbo.service.itemBarCodeOfficialService.version>${test.version}
                </dubbo.service.itemBarCodeOfficialService.version>
                <dubbo.service.itemAttributeOfficialService.version>${test.version}
                </dubbo.service.itemAttributeOfficialService.version>
                <dubbo.service.itemAttributeImageOfficialService.version>${test.version}
                </dubbo.service.itemAttributeImageOfficialService.version>
                <dubbo.service.itemPriceOfficialService.version>${test.version}
                </dubbo.service.itemPriceOfficialService.version>
                <dubbo.service.itemOfficialExtService.version>${test.version}
                </dubbo.service.itemOfficialExtService.version>

                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <dubbo.service.logisticsCustomsDeclareService.vesion>${test.version}
                </dubbo.service.logisticsCustomsDeclareService.vesion>
                <dubbo.service.logisticsCustomsDeclareOfficialService.vesion>${test.version}
                </dubbo.service.logisticsCustomsDeclareOfficialService.vesion>
                <dubbo.service.logisticsUnitService.vesion>${test.version}
                </dubbo.service.logisticsUnitService.vesion>

                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <dubbo.service.memberService.vesion>${test.version}</dubbo.service.memberService.vesion>
                <dubbo.service.menuService.vesion>${test.version}</dubbo.service.menuService.vesion>
                <dubbo.service.buttonService.version>${test.version}</dubbo.service.buttonService.version>
                <dubbo.service.memberCateService.version>${test.version}</dubbo.service.memberCateService.version>
                <dubbo.service.roleService.version>${test.version}</dubbo.service.roleService.version>
                <dubbo.service.memberRoleService.version>${test.version}</dubbo.service.memberRoleService.version>
                <dubbo.service.departmentService.version>${test.version}</dubbo.service.departmentService.version>
                <dubbo.service.resourceGroupService.version>${test.version}</dubbo.service.resourceGroupService.version>
                <dubbo.service.roleResourceGroupService.version>${test.version}
                </dubbo.service.roleResourceGroupService.version>
                <dubbo.service.resourceService.version>${test.version}</dubbo.service.resourceService.version>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <dubbo.service.sysDataDictionaryService.vesion>${test.version}
                </dubbo.service.sysDataDictionaryService.vesion>
                <dubbo.service.sysMemberLoginLogService.vesion>${test.version}
                </dubbo.service.sysMemberLoginLogService.vesion>
                <dubbo.service.sysConsumeMessageService.vesion>${test.version}
                </dubbo.service.sysConsumeMessageService.vesion>
                <dubbo.service.sysSettingService.vesion>${test.version}</dubbo.service.sysSettingService.vesion>
                <dubbo.service.sysVerifyCodePictureService.vesion>${test.version}</dubbo.service.sysVerifyCodePictureService.vesion>
                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <dubbo.service.warehouseService.version>${test.version}</dubbo.service.warehouseService.version>
                <dubbo.service.warehouseTypeService.version>${test.version}</dubbo.service.warehouseTypeService.version>
                <dubbo.service.warehouseOfficialService.version>${test.version}
                </dubbo.service.warehouseOfficialService.version>

                <!-- msyt-warehouse ### End -->
                <!-- msyt-thirdplatform ## Begin -->

                <dubbo.service.thirdplatform.erpStockService.version>${test.version}
                </dubbo.service.thirdplatform.erpStockService.version>

                <!-- msyt-thirdplatform ## End -->

                <!-- ############ Dubbo 服务版本号 ## End  ###########  -->


                <!-- ########################### 启动是否检查服务 ## Begin ########################################################## -->


                <!-- ############ Dubbo 服务，启动时是否检查 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.log>${test.dubbo.consumer.check}</dubbo.consumer.check.log>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.msOnionLog>${test.dubbo.reference.check}</dubbo.reference.check.msOnionLog>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.cache>${test.dubbo.consumer.check}</dubbo.consumer.check.cache>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.cacheService>${test.dubbo.reference.check}</dubbo.reference.check.cacheService>
                <dubbo.reference.check.dynamicCacheService>${test.dubbo.reference.check}
                </dubbo.reference.check.dynamicCacheService>

                <!-- msyt-cache ## End -->

                <!-- msyt-collector ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.collector>${test.dubbo.consumer.check}</dubbo.consumer.check.collector>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBiddingService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBiddingService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupAttributeService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBrandService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBrandService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCategoryService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCategoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemOriginService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemOriginService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemPriceService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemPriceService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCollectionService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCollectionService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorEditorService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorEditorService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemAttributeService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemHistoryService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemHistoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemContentService>${test.dubbo.reference.check}
                </dubbo.reference.check.collectorItemContentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemFormalImageLibService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemFormalImageLibService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBarcodeService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemBarcodeService>
                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemLogService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemLogService>

                <dubbo.reference.check.itemAttributeImageService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageService>

                <dubbo.reference.check.categoryAttributeGroupService>${test.dubbo.reference.check}
                </dubbo.reference.check.categoryAttributeGroupService>

                <!-- msyt-collector ## End -->

                <!-- msyt-content ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.content>${test.dubbo.consumer.check}</dubbo.consumer.check.content>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentService>${test.dubbo.reference.check}
                </dubbo.reference.check.contentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentKeywordService>${test.dubbo.reference.check}
                </dubbo.reference.check.contentKeywordService>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.fileresource>${test.dubbo.consumer.check}</dubbo.consumer.check.fileresource>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceDownloadService>${test.dubbo.reference.check}
                </dubbo.reference.check.fileResourceDownloadService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceUploadService>${test.dubbo.reference.check}
                </dubbo.reference.check.fileResourceUploadService>
                <dubbo.reference.check.fileResourceTemplateService>${test.dubbo.reference.check}
                </dubbo.reference.check.fileResourceTemplateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.ablumLibService>${test.dubbo.reference.check}
                </dubbo.reference.check.ablumLibService>


                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.item>${test.dubbo.consumer.check}</dubbo.consumer.check.item>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBasicOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemBasicOfficialService>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemCollectionOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemCollectionOfficialService>
                <dubbo.reference.check.itemBarCodeOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemBarCodeOfficialService>
                <dubbo.reference.check.itemAttributeImageOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageOfficialService>
                <dubbo.reference.check.itemAttributeOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeOfficialService>
                <dubbo.reference.check.itemPriceOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemPriceOfficialService>
                <dubbo.reference.check.itemOfficialExtService>${test.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialExtService>


                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.logistics>${test.dubbo.consumer.check}</dubbo.consumer.check.logistics>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.logisticsCustomsDeclareService>${test.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareService>
                <dubbo.reference.check.logisticsCustomsDeclareOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareOfficialService>
                <dubbo.reference.check.logisticsUnitService>${test.dubbo.reference.check}
                </dubbo.reference.check.logisticsUnitService>

                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.member>${test.dubbo.consumer.check}</dubbo.consumer.check.member>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberService>${test.dubbo.reference.check}</dubbo.reference.check.memberService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.menuService>${test.dubbo.reference.check}</dubbo.reference.check.menuService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.buttonService>${test.dubbo.reference.check}</dubbo.reference.check.buttonService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberCateService>${test.dubbo.reference.check}
                </dubbo.reference.check.memberCateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleService>${test.dubbo.reference.check}</dubbo.reference.check.roleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberRoleService>${test.dubbo.reference.check}
                </dubbo.reference.check.memberRoleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.departmentService>${test.dubbo.reference.check}
                </dubbo.reference.check.departmentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceGroupService>${test.dubbo.reference.check}
                </dubbo.reference.check.resourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleResourceGroupService>${test.dubbo.reference.check}
                </dubbo.reference.check.roleResourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceService>${test.dubbo.reference.check}
                </dubbo.reference.check.resourceService>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.system>${test.dubbo.consumer.check}</dubbo.consumer.check.system>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysDataDictionaryService>${test.dubbo.reference.check}
                </dubbo.reference.check.sysDataDictionaryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysMemberLoginLogService>${test.dubbo.reference.check}
                </dubbo.reference.check.sysMemberLoginLogService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysConsumeMessageService>${test.dubbo.reference.check}
                </dubbo.reference.check.sysConsumeMessageService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysSettingService>${test.dubbo.reference.check}
                </dubbo.reference.check.sysSettingService>

                <dubbo.reference.check.sysVerifyCodePictureService>${test.dubbo.reference.check}
                </dubbo.reference.check.sysVerifyCodePictureService>

                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.warehouse>${test.dubbo.consumer.check}</dubbo.consumer.check.warehouse>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.warehouseService>${test.dubbo.reference.check}
                </dubbo.reference.check.warehouseService>
                <dubbo.reference.check.warehouseOfficialService>${test.dubbo.reference.check}
                </dubbo.reference.check.warehouseOfficialService>

                <!-- msyt-warehouse ### End -->

                <!-- msyt-thirdplatform ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.thirdplatform.erp>${test.dubbo.consumer.check}
                </dubbo.consumer.check.thirdplatform.erp>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.thirdplatform.erpStockService>${test.dubbo.reference.check}
                </dubbo.reference.check.thirdplatform.erpStockService>

                <!-- msyt-thirdplatform ## End -->
                <!-- ############ Dubbo 服务，启动时是否检查 ## End  ###########  -->


                <!-- ########################### 启动是否检查服务 ## End  ########################################################## -->


                <!-- ################  RocketMQ配置 ## Begin ########################### -->

                <!-- namesrvAddr -->
                <rocketmq.namesrvAddr>rocketmq01-test:9876;rocketmq02-test:9876</rocketmq.namesrvAddr>

                <!-- producerGroup ## Begin -->
                <rocketmq.producerGroup.collectorService>mq-producerGroup-collectorService-test
                </rocketmq.producerGroup.collectorService>
                <rocketmq.producerGroup.contentService>mq-producerGroup-contentService-test
                </rocketmq.producerGroup.contentService>
                <rocketmq.producerGroup.fileResourceService>mq-producerGroup-fileResourceService-test
                </rocketmq.producerGroup.fileResourceService>
                <rocketmq.producerGroup.itemService>mq-producerGroup-itemService-test
                </rocketmq.producerGroup.itemService>
                <rocketmq.producerGroup.logisticsService>mq-producerGroup-logisticsService-test
                </rocketmq.producerGroup.logisticsService>
                <rocketmq.producerGroup.memberService>mq-producerGroup-memberService-test
                </rocketmq.producerGroup.memberService>
                <rocketmq.producerGroup.systemService>mq-producerGroup-systemService-test
                </rocketmq.producerGroup.systemService>
                <rocketmq.producerGroup.warehouseService>mq-producerGroup-warehouseService-test
                </rocketmq.producerGroup.warehouseService>
                <!-- producerGroup ## End -->

                <!-- topic -->
                <rocketmq.topic>mq-topic-test-01</rocketmq.topic>

                <!-- consumerGroup ## Begin -->
                <rocketmq.consumerGroup.systemService>mq-consumerGroup-systemService-test
                </rocketmq.consumerGroup.systemService>
                <rocketmq.consumerGroup.managerWeb>mq-consumerGroup-managerWeb-test</rocketmq.consumerGroup.managerWeb>
                <rocketmq.consumerGroup.itemService>mq-consumerGroup-itemService-test
                </rocketmq.consumerGroup.itemService>
                <rocketmq.consumerGroup.searchService>mq-consumerGroup-searchService-test
                </rocketmq.consumerGroup.searchService>
                <!-- consumerGroup ## End -->

                <!-- subExpression ## Begin -->
                <!-- subExpression ## * : all, or : Menu@Save || Menu@Update -->
                <rocketmq.consumer.subExpression.systemService>*</rocketmq.consumer.subExpression.systemService>
                <rocketmq.consumer.subExpression.managerWeb>*</rocketmq.consumer.subExpression.managerWeb>
                <rocketmq.consumer.subExpression.itemService>*</rocketmq.consumer.subExpression.itemService>
                <rocketmq.consumer.subExpression.searchService>*</rocketmq.consumer.subExpression.searchService>
                <!-- subExpression ## End -->

                <!-- ###################### RocketMQ配置 ## End ####################### -->

                <!-- ###################### 日志中心，日志配置 ## Begin ####################### -->

                <flogger.log.path>${test.flogger.log.path}</flogger.log.path>

                <flogger.log.console.print>${test.flogger.log.console.print}</flogger.log.console.print>

                <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
                <flogger.log.level>${test.flogger.log.level}</flogger.log.level>

                <!-- ###################### 日志中心，日志配置 ## End ####################### -->


                <!-- ###################### Redis集群配置 ## Begin ####################### -->

                <!-- 第1个节点 -->
                <redis.cluster.host.node1>${test.redis.cluster.host.node1}</redis.cluster.host.node1>
                <redis.cluster.port.node1>${test.redis.cluster.port.node1}</redis.cluster.port.node1>

                <!-- 第2个节点 -->
                <redis.cluster.host.node2>${test.redis.cluster.host.node2}</redis.cluster.host.node2>
                <redis.cluster.port.node2>${test.redis.cluster.port.node2}</redis.cluster.port.node2>

                <!-- 第3个节点 -->
                <redis.cluster.host.node3>${test.redis.cluster.host.node3}</redis.cluster.host.node3>
                <redis.cluster.port.node3>${test.redis.cluster.port.node3}</redis.cluster.port.node3>

                <!-- ###################### Redis集群配置 ## End  ####################### -->

                <!-- #############################  Zookeeper 集群配置 ## Begin ############################### -->

                <zk.connectString>${test.zk.connectString}</zk.connectString>

                <!-- #############################  Zookeeper 集群配置 ## End ############################### -->

                <!-- #############################  MySQL、MariaDB 集群配置 ## Begin ############################### -->

                <!-- ########## DruidDataSource ### 配置 ## Begin ##############  -->

                <!-- 测试环境 ### Begin -->
                <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
                <jdbc.initialSize>${test.jdbc.initialSize}</jdbc.initialSize>
                <!-- 最小连接池数量 -->
                <jdbc.minIdle>${test.jdbc.minIdle}</jdbc.minIdle>
                <!-- 最大连接池数量 -->
                <jdbc.maxActive>${test.jdbc.maxActive}</jdbc.maxActive>
                <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.maxWait>${test.jdbc.maxWait}</jdbc.maxWait>
                <!--
                配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
                有两个含义：
                1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
                <jdbc.timeBetweenEvictionRunsMillis>${test.jdbc.timeBetweenEvictionRunsMillis}</jdbc.timeBetweenEvictionRunsMillis>
                <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.minEvictableIdleTimeMillis>${test.jdbc.minEvictableIdleTimeMillis}</jdbc.minEvictableIdleTimeMillis>
                <!-- 测试环境 ### End -->

                <!-- ########## DruidDataSource ### 配置 ## End ##############  -->

                <!-- ### 收集中心： myst-collector ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.collector>${test.jdbc.url.collector}</jdbc.url.collector>
                <!-- 用户名 -->
                <jdbc.username.collector>${test.jdbc.username.collector}</jdbc.username.collector>
                <!-- 密码 -->
                <jdbc.password.collector>${test.jdbc.password.collector}</jdbc.password.collector>
                <!-- 测试环境 ### End -->

                <!-- ### 收集中心： myst-collector ### End ########## -->


                <!-- ### 内容中心： myst-content ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.content>${test.jdbc.url.content}</jdbc.url.content>
                <!-- 用户名 -->
                <jdbc.username.content>${test.jdbc.username.content}</jdbc.username.content>
                <!-- 密码 -->
                <jdbc.password.content>${test.jdbc.password.content}</jdbc.password.content>
                <!-- 测试环境 ### End -->


                <!-- ### 内容中心： myst-content ### End ########## -->

                <!-- ### 文件资源中心： myst-fileresource ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.fileresource>${test.jdbc.url.fileresource}</jdbc.url.fileresource>
                <!-- 用户名 -->
                <jdbc.username.fileresource>${test.jdbc.username.fileresource}</jdbc.username.fileresource>
                <!-- 密码 -->
                <jdbc.password.fileresource>${test.jdbc.password.fileresource}</jdbc.password.fileresource>
                <!-- 测试环境 ### End -->


                <!-- ### 文件资源中心： myst-fileresource ### End ########## -->

                <!-- ### 商品中心： myst-item ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.item>${test.jdbc.url.item}</jdbc.url.item>
                <!-- 用户名 -->
                <jdbc.username.item>${test.jdbc.username.item}</jdbc.username.item>
                <!-- 密码 -->
                <jdbc.password.item>${test.jdbc.password.item}</jdbc.password.item>
                <!-- 测试环境 ### End -->


                <!-- ### 商品中心： myst-item ### End ########## -->

                <!-- ### 物流中心： myst-logistics ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.logistics>${test.jdbc.url.logistics}</jdbc.url.logistics>
                <!-- 用户名 -->
                <jdbc.username.logistics>${test.jdbc.username.logistics}</jdbc.username.logistics>
                <!-- 密码 -->
                <jdbc.password.logistics>${test.jdbc.password.logistics}</jdbc.password.logistics>
                <!-- 测试环境 ### End -->

                <!-- ### 物流中心： myst-logistics ### End ########## -->

                <!-- ### 成员中心： myst-member ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.member>${test.jdbc.url.member}</jdbc.url.member>
                <!-- 用户名 -->
                <jdbc.username.member>${test.jdbc.username.member}</jdbc.username.member>
                <!-- 密码 -->
                <jdbc.password.member>${test.jdbc.password.member}</jdbc.password.member>
                <!-- 测试环境 ### End -->

                <!-- ### 成员中心： myst-member ### End ########## -->

                <!-- ### 系统中心： myst-system ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.system>${test.jdbc.url.system}</jdbc.url.system>
                <!-- 用户名 -->
                <jdbc.username.system>${test.jdbc.username.system}</jdbc.username.system>
                <!-- 密码 -->
                <jdbc.password.system>${test.jdbc.password.system}</jdbc.password.system>
                <!-- 测试环境 ### End -->


                <!-- ### 系统中心： myst-system ### End ########## -->

                <!-- ### 仓库中心： myst-warehouse ### Begin ########## -->

                <!-- 测试环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.warehouse>${test.jdbc.url.warehouse}</jdbc.url.warehouse>
                <!-- 用户名 -->
                <jdbc.username.warehouse>${test.jdbc.username.warehouse}</jdbc.username.warehouse>
                <!-- 密码 -->
                <jdbc.password.warehouse>${test.jdbc.password.warehouse}</jdbc.password.warehouse>
                <!-- 测试环境 ### End -->


                <!-- ### 仓库中心： myst-warehouse ### End ########## -->


                <!-- #############################  MySQL、MariaDB 集群配置 ## End ############################### -->


                <!-- ############ 导入Excel根路径，配置 ## Begin ############################ -->

                <!-- 测试环境 -->
                <excel.import.file.rootDir>${test.excel.import.file.rootDir}</excel.import.file.rootDir>

                <!-- ############ 导入Excel根路径，配置 ## End ############################ -->

                <!-- ############ 百度富文本编辑临时目录，配置 ## Begin ############################ -->

                <!-- 测试环境 -->
                <ueditor.tmp.dir>${test.ueditor.tmp.dir}</ueditor.tmp.dir>

                <!-- ############ 百度富文本编辑临时目录，配置 ## End ############################ -->


            </properties>
        </profile>
        <!-- 稳定环境  -->
        <profile>
            <id>sta</id>
            <!-- 必须设置一个环境，否则参数报错，设置为默认激活  -->
            <!--<activation>
                <activeByDefault>true</activeByDefault>
            </activation>-->
            <properties>
                <profile.dir>${resources.dir}/sta</profile.dir>
                <target.env>sta</target.env>

                <!-- ############ Dubbo 服务版本号 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <dubbo.service.logService.version>${sta.version}</dubbo.service.logService.version>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <dubbo.service.cacheService.version>${sta.version}</dubbo.service.cacheService.version>
                <dubbo.service.dynamicCacheService.version>${sta.version}</dubbo.service.dynamicCacheService.version>

                <!-- msyt-cache ## End -->

                <!-- msyt-collector ## Begin -->

                <dubbo.service.collectorItemService.version>${sta.version}</dubbo.service.collectorItemService.version>
                <dubbo.service.collectorItemBiddingService.version>${sta.version}
                </dubbo.service.collectorItemBiddingService.version>
                <dubbo.service.collectorAttributeService.version>${sta.version}
                </dubbo.service.collectorAttributeService.version>
                <dubbo.service.collectorAttributeGroupService.version>${sta.version}
                </dubbo.service.collectorAttributeGroupService.version>
                <dubbo.service.collectorAttributeGroupAttributeService.version>${sta.version}
                </dubbo.service.collectorAttributeGroupAttributeService.version>
                <dubbo.service.collectorItemBrandService.version>${sta.version}
                </dubbo.service.collectorItemBrandService.version>
                <dubbo.service.collectorItemCategoryService.version>${sta.version}
                </dubbo.service.collectorItemCategoryService.version>
                <dubbo.service.collectorItemOriginService.version>${sta.version}
                </dubbo.service.collectorItemOriginService.version>
                <dubbo.service.collectorItemPriceService.version>${sta.version}
                </dubbo.service.collectorItemPriceService.version>
                <dubbo.service.collectorItemCollectionService.version>${sta.version}
                </dubbo.service.collectorItemCollectionService.version>
                <dubbo.service.collectorEditorService.version>${sta.version}
                </dubbo.service.collectorEditorService.version>
                <dubbo.service.collectorItemAttributeService.version>${sta.version}
                </dubbo.service.collectorItemAttributeService.version>
                <dubbo.service.collectorItemHistoryService.version>${sta.version}
                </dubbo.service.collectorItemHistoryService.version>
                <dubbo.service.collectorItemContentService.version>${sta.version}
                </dubbo.service.collectorItemContentService.version>
                <dubbo.service.itemFormalImageLibService.version>${sta.version}
                </dubbo.service.itemFormalImageLibService.version>
                <dubbo.service.itemBarcodeService.version>${sta.version}</dubbo.service.itemBarcodeService.version>
                <dubbo.service.itemAttributeImageService.version>${sta.version}
                </dubbo.service.itemAttributeImageService.version>
                <dubbo.service.itemLogService.version>${sta.version}</dubbo.service.itemLogService.version>

                <dubbo.service.categoryAttributeGroupService.version>${sta.version}
                </dubbo.service.categoryAttributeGroupService.version>
                <!-- msyt-collector ## End -->

                <!-- msyt-content ### Begin -->

                <dubbo.service.contentService.version>${sta.version}</dubbo.service.contentService.version>
                <dubbo.service.contentKeywordService.version>${sta.version}
                </dubbo.service.contentKeywordService.version>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <dubbo.service.fileResourceDownloadService.version>${sta.version}
                </dubbo.service.fileResourceDownloadService.version>
                <dubbo.service.fileResourceUploadService.version>${sta.version}
                </dubbo.service.fileResourceUploadService.version>
                <dubbo.service.ablumLibService.version>${sta.version}</dubbo.service.ablumLibService.version>
                <dubbo.service.fileResourceTemplateService.version>${sta.version}</dubbo.service.fileResourceTemplateService.version>

                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <dubbo.service.itemOfficialService.version>${sta.version}</dubbo.service.itemOfficialService.version>
                <dubbo.service.itemBasicOfficialService.version>${sta.version}
                </dubbo.service.itemBasicOfficialService.version>
                <dubbo.service.itemCollectionOfficialService.version>${sta.version}
                </dubbo.service.itemCollectionOfficialService.version>
                <dubbo.service.itemBarCodeOfficialService.version>${sta.version}
                </dubbo.service.itemBarCodeOfficialService.version>
                <dubbo.service.itemAttributeOfficialService.version>${sta.version}
                </dubbo.service.itemAttributeOfficialService.version>
                <dubbo.service.itemAttributeImageOfficialService.version>${sta.version}
                </dubbo.service.itemAttributeImageOfficialService.version>
                <dubbo.service.itemPriceOfficialService.version>${sta.version}
                </dubbo.service.itemPriceOfficialService.version>
                <dubbo.service.itemOfficialExtService.version>${sta.version}
                </dubbo.service.itemOfficialExtService.version>

                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <dubbo.service.logisticsCustomsDeclareService.vesion>${sta.version}
                </dubbo.service.logisticsCustomsDeclareService.vesion>
                <dubbo.service.logisticsCustomsDeclareOfficialService.vesion>${sta.version}
                </dubbo.service.logisticsCustomsDeclareOfficialService.vesion>
                <dubbo.service.logisticsUnitService.vesion>${sta.version}
                </dubbo.service.logisticsUnitService.vesion>

                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <dubbo.service.memberService.vesion>${sta.version}</dubbo.service.memberService.vesion>
                <dubbo.service.menuService.vesion>${sta.version}</dubbo.service.menuService.vesion>
                <dubbo.service.buttonService.version>${sta.version}</dubbo.service.buttonService.version>
                <dubbo.service.memberCateService.version>${sta.version}</dubbo.service.memberCateService.version>
                <dubbo.service.roleService.version>${sta.version}</dubbo.service.roleService.version>
                <dubbo.service.memberRoleService.version>${sta.version}</dubbo.service.memberRoleService.version>
                <dubbo.service.departmentService.version>${sta.version}</dubbo.service.departmentService.version>
                <dubbo.service.resourceGroupService.version>${sta.version}</dubbo.service.resourceGroupService.version>
                <dubbo.service.roleResourceGroupService.version>${sta.version}
                </dubbo.service.roleResourceGroupService.version>
                <dubbo.service.resourceService.version>${sta.version}</dubbo.service.resourceService.version>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <dubbo.service.sysDataDictionaryService.vesion>${sta.version}
                </dubbo.service.sysDataDictionaryService.vesion>
                <dubbo.service.sysMemberLoginLogService.vesion>${sta.version}
                </dubbo.service.sysMemberLoginLogService.vesion>
                <dubbo.service.sysConsumeMessageService.vesion>${sta.version}
                </dubbo.service.sysConsumeMessageService.vesion>
                <dubbo.service.sysSettingService.vesion>${sta.version}</dubbo.service.sysSettingService.vesion>
                <dubbo.service.sysVerifyCodePictureService.vesion>${sta.version}</dubbo.service.sysVerifyCodePictureService.vesion>
                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <dubbo.service.warehouseService.version>${sta.version}</dubbo.service.warehouseService.version>
                <dubbo.service.warehouseTypeService.version>${sta.version}</dubbo.service.warehouseTypeService.version>
                <dubbo.service.warehouseOfficialService.version>${sta.version}
                </dubbo.service.warehouseOfficialService.version>

                <!-- msyt-warehouse ### End -->
                <!-- msyt-thirdplatform ## Begin -->

                <dubbo.service.thirdplatform.erpStockService.version>${sta.version}
                </dubbo.service.thirdplatform.erpStockService.version>

                <!-- msyt-thirdplatform ## End -->

                <!-- ############ Dubbo 服务版本号 ## End  ###########  -->


                <!-- ########################### 启动是否检查服务 ## Begin ########################################################## -->


                <!-- ############ Dubbo 服务，启动时是否检查 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.log>${sta.dubbo.consumer.check}</dubbo.consumer.check.log>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.msOnionLog>${sta.dubbo.reference.check}</dubbo.reference.check.msOnionLog>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.cache>${sta.dubbo.consumer.check}</dubbo.consumer.check.cache>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.cacheService>${sta.dubbo.reference.check}</dubbo.reference.check.cacheService>
                <dubbo.reference.check.dynamicCacheService>${sta.dubbo.reference.check}
                </dubbo.reference.check.dynamicCacheService>

                <!-- msyt-cache ## End -->

                <!-- msyt-collector ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.collector>${sta.dubbo.consumer.check}</dubbo.consumer.check.collector>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBiddingService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBiddingService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupAttributeService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBrandService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBrandService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCategoryService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCategoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemOriginService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemOriginService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemPriceService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemPriceService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCollectionService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCollectionService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorEditorService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorEditorService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemAttributeService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemHistoryService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemHistoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemContentService>${sta.dubbo.reference.check}
                </dubbo.reference.check.collectorItemContentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemFormalImageLibService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemFormalImageLibService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBarcodeService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemBarcodeService>
                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemLogService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemLogService>

                <dubbo.reference.check.itemAttributeImageService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageService>

                <dubbo.reference.check.categoryAttributeGroupService>${sta.dubbo.reference.check}
                </dubbo.reference.check.categoryAttributeGroupService>

                <!-- msyt-collector ## End -->

                <!-- msyt-content ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.content>${sta.dubbo.consumer.check}</dubbo.consumer.check.content>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentService>${sta.dubbo.reference.check}
                </dubbo.reference.check.contentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentKeywordService>${sta.dubbo.reference.check}
                </dubbo.reference.check.contentKeywordService>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.fileresource>${sta.dubbo.consumer.check}</dubbo.consumer.check.fileresource>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceDownloadService>${sta.dubbo.reference.check}
                </dubbo.reference.check.fileResourceDownloadService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceUploadService>${sta.dubbo.reference.check}
                </dubbo.reference.check.fileResourceUploadService>
                <dubbo.reference.check.fileResourceTemplateService>${sta.dubbo.reference.check}
                </dubbo.reference.check.fileResourceTemplateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.ablumLibService>${sta.dubbo.reference.check}
                </dubbo.reference.check.ablumLibService>


                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.item>${sta.dubbo.consumer.check}</dubbo.consumer.check.item>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBasicOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemBasicOfficialService>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemCollectionOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemCollectionOfficialService>
                <dubbo.reference.check.itemBarCodeOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemBarCodeOfficialService>
                <dubbo.reference.check.itemAttributeImageOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageOfficialService>
                <dubbo.reference.check.itemAttributeOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeOfficialService>
                <dubbo.reference.check.itemPriceOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemPriceOfficialService>
                <dubbo.reference.check.itemOfficialExtService>${sta.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialExtService>


                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.logistics>${sta.dubbo.consumer.check}</dubbo.consumer.check.logistics>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.logisticsCustomsDeclareService>${sta.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareService>
                <dubbo.reference.check.logisticsCustomsDeclareOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareOfficialService>
                <dubbo.reference.check.logisticsUnitService>${sta.dubbo.reference.check}
                </dubbo.reference.check.logisticsUnitService>

                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.member>${sta.dubbo.consumer.check}</dubbo.consumer.check.member>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberService>${sta.dubbo.reference.check}</dubbo.reference.check.memberService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.menuService>${sta.dubbo.reference.check}</dubbo.reference.check.menuService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.buttonService>${sta.dubbo.reference.check}</dubbo.reference.check.buttonService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberCateService>${sta.dubbo.reference.check}
                </dubbo.reference.check.memberCateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleService>${sta.dubbo.reference.check}</dubbo.reference.check.roleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberRoleService>${sta.dubbo.reference.check}
                </dubbo.reference.check.memberRoleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.departmentService>${sta.dubbo.reference.check}
                </dubbo.reference.check.departmentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceGroupService>${sta.dubbo.reference.check}
                </dubbo.reference.check.resourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleResourceGroupService>${sta.dubbo.reference.check}
                </dubbo.reference.check.roleResourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceService>${sta.dubbo.reference.check}
                </dubbo.reference.check.resourceService>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.system>${sta.dubbo.consumer.check}</dubbo.consumer.check.system>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysDataDictionaryService>${sta.dubbo.reference.check}
                </dubbo.reference.check.sysDataDictionaryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysMemberLoginLogService>${sta.dubbo.reference.check}
                </dubbo.reference.check.sysMemberLoginLogService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysConsumeMessageService>${sta.dubbo.reference.check}
                </dubbo.reference.check.sysConsumeMessageService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysSettingService>${sta.dubbo.reference.check}
                </dubbo.reference.check.sysSettingService>

                <dubbo.reference.check.sysVerifyCodePictureService>${sta.dubbo.reference.check}
                </dubbo.reference.check.sysVerifyCodePictureService>
                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.warehouse>${sta.dubbo.consumer.check}</dubbo.consumer.check.warehouse>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.warehouseService>${sta.dubbo.reference.check}
                </dubbo.reference.check.warehouseService>
                <dubbo.reference.check.warehouseOfficialService>${sta.dubbo.reference.check}
                </dubbo.reference.check.warehouseOfficialService>

                <!-- msyt-warehouse ### End -->

                <!-- msyt-thirdplatform ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.thirdplatform.erp>${sta.dubbo.consumer.check}
                </dubbo.consumer.check.thirdplatform.erp>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.thirdplatform.erpStockService>${sta.dubbo.reference.check}
                </dubbo.reference.check.thirdplatform.erpStockService>

                <!-- msyt-thirdplatform ## End -->
                <!-- ############ Dubbo 服务，启动时是否检查 ## End  ###########  -->


                <!-- ########################### 启动是否检查服务 ## End  ########################################################## -->


                <!-- ################  RocketMQ配置 ## Begin ########################### -->

                <!-- namesrvAddr -->
                <rocketmq.namesrvAddr>rocketmq01-sta:9876;rocketmq02-sta:9876</rocketmq.namesrvAddr>

                <!-- producerGroup ## Begin -->
                <rocketmq.producerGroup.collectorService>mq-producerGroup-collectorService-sta
                </rocketmq.producerGroup.collectorService>
                <rocketmq.producerGroup.contentService>mq-producerGroup-contentService-sta
                </rocketmq.producerGroup.contentService>
                <rocketmq.producerGroup.fileResourceService>mq-producerGroup-fileResourceService-sta
                </rocketmq.producerGroup.fileResourceService>
                <rocketmq.producerGroup.itemService>mq-producerGroup-itemService-sta
                </rocketmq.producerGroup.itemService>
                <rocketmq.producerGroup.logisticsService>mq-producerGroup-logisticsService-sta
                </rocketmq.producerGroup.logisticsService>
                <rocketmq.producerGroup.memberService>mq-producerGroup-memberService-sta
                </rocketmq.producerGroup.memberService>
                <rocketmq.producerGroup.systemService>mq-producerGroup-systemService-sta
                </rocketmq.producerGroup.systemService>
                <rocketmq.producerGroup.warehouseService>mq-producerGroup-warehouseService-sta
                </rocketmq.producerGroup.warehouseService>
                <!-- producerGroup ## End -->

                <!-- topic -->
                <rocketmq.topic>mq-topic-sta-01</rocketmq.topic>

                <!-- consumerGroup ## Begin -->
                <rocketmq.consumerGroup.systemService>mq-consumerGroup-systemService-sta
                </rocketmq.consumerGroup.systemService>
                <rocketmq.consumerGroup.managerWeb>mq-consumerGroup-managerWeb-sta</rocketmq.consumerGroup.managerWeb>
                <rocketmq.consumerGroup.itemService>mq-consumerGroup-itemService-sta
                </rocketmq.consumerGroup.itemService>
                <rocketmq.consumerGroup.searchService>mq-consumerGroup-searchService-sta
                </rocketmq.consumerGroup.searchService>
                <!-- consumerGroup ## End -->

                <!-- subExpression ## Begin -->
                <!-- subExpression ## * : all, or : Menu@Save || Menu@Update -->
                <rocketmq.consumer.subExpression.systemService>*</rocketmq.consumer.subExpression.systemService>
                <rocketmq.consumer.subExpression.managerWeb>*</rocketmq.consumer.subExpression.managerWeb>
                <rocketmq.consumer.subExpression.itemService>*</rocketmq.consumer.subExpression.itemService>
                <rocketmq.consumer.subExpression.searchService>*</rocketmq.consumer.subExpression.searchService>
                <!-- subExpression ## End -->

                <!-- ###################### RocketMQ配置 ## End ####################### -->

                <!-- ###################### 日志中心，日志配置 ## Begin ####################### -->

                <flogger.log.path>${sta.flogger.log.path}</flogger.log.path>

                <flogger.log.console.print>${sta.flogger.log.console.print}</flogger.log.console.print>

                <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
                <flogger.log.level>${sta.flogger.log.level}</flogger.log.level>

                <!-- ###################### 日志中心，日志配置 ## End ####################### -->


                <!-- ###################### Redis集群配置 ## Begin ####################### -->

                <!-- 第1个节点 -->
                <redis.cluster.host.node1>${sta.redis.cluster.host.node1}</redis.cluster.host.node1>
                <redis.cluster.port.node1>${sta.redis.cluster.port.node1}</redis.cluster.port.node1>

                <!-- 第2个节点 -->
                <redis.cluster.host.node2>${sta.redis.cluster.host.node2}</redis.cluster.host.node2>
                <redis.cluster.port.node2>${sta.redis.cluster.port.node2}</redis.cluster.port.node2>

                <!-- 第3个节点 -->
                <redis.cluster.host.node3>${sta.redis.cluster.host.node3}</redis.cluster.host.node3>
                <redis.cluster.port.node3>${sta.redis.cluster.port.node3}</redis.cluster.port.node3>

                <!-- ###################### Redis集群配置 ## End  ####################### -->

                <!-- #############################  Zookeeper 集群配置 ## Begin ############################### -->

                <zk.connectString>${sta.zk.connectString}</zk.connectString>

                <!-- #############################  Zookeeper 集群配置 ## End ############################### -->

                <!-- #############################  MySQL、MariaDB 集群配置 ## Begin ############################### -->

                <!-- ########## DruidDataSource ### 配置 ## Begin ##############  -->

                <!-- 稳定环境 ### Begin -->
                <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
                <jdbc.initialSize>${sta.jdbc.initialSize}</jdbc.initialSize>
                <!-- 最小连接池数量 -->
                <jdbc.minIdle>${sta.jdbc.minIdle}</jdbc.minIdle>
                <!-- 最大连接池数量 -->
                <jdbc.maxActive>${sta.jdbc.maxActive}</jdbc.maxActive>
                <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.maxWait>${sta.jdbc.maxWait}</jdbc.maxWait>
                <!--
                配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
                有两个含义：
                1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
                <jdbc.timeBetweenEvictionRunsMillis>${sta.jdbc.timeBetweenEvictionRunsMillis}</jdbc.timeBetweenEvictionRunsMillis>
                <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.minEvictableIdleTimeMillis>${sta.jdbc.minEvictableIdleTimeMillis}</jdbc.minEvictableIdleTimeMillis>
                <!-- 稳定环境 ### End -->

                <!-- ########## DruidDataSource ### 配置 ## End ##############  -->

                <!-- ### 收集中心： myst-collector ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.collector>${sta.jdbc.url.collector}</jdbc.url.collector>
                <!-- 用户名 -->
                <jdbc.username.collector>${sta.jdbc.username.collector}</jdbc.username.collector>
                <!-- 密码 -->
                <jdbc.password.collector>${sta.jdbc.password.collector}</jdbc.password.collector>
                <!-- 稳定环境 ### End -->

                <!-- ### 收集中心： myst-collector ### End ########## -->


                <!-- ### 内容中心： myst-content ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.content>${sta.jdbc.url.content}</jdbc.url.content>
                <!-- 用户名 -->
                <jdbc.username.content>${sta.jdbc.username.content}</jdbc.username.content>
                <!-- 密码 -->
                <jdbc.password.content>${sta.jdbc.password.content}</jdbc.password.content>
                <!-- 稳定环境 ### End -->


                <!-- ### 内容中心： myst-content ### End ########## -->

                <!-- ### 文件资源中心： myst-fileresource ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.fileresource>${sta.jdbc.url.fileresource}</jdbc.url.fileresource>
                <!-- 用户名 -->
                <jdbc.username.fileresource>${sta.jdbc.username.fileresource}</jdbc.username.fileresource>
                <!-- 密码 -->
                <jdbc.password.fileresource>${sta.jdbc.password.fileresource}</jdbc.password.fileresource>
                <!-- 稳定环境 ### End -->


                <!-- ### 文件资源中心： myst-fileresource ### End ########## -->

                <!-- ### 商品中心： myst-item ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.item>${sta.jdbc.url.item}</jdbc.url.item>
                <!-- 用户名 -->
                <jdbc.username.item>${sta.jdbc.username.item}</jdbc.username.item>
                <!-- 密码 -->
                <jdbc.password.item>${sta.jdbc.password.item}</jdbc.password.item>
                <!-- 稳定环境 ### End -->


                <!-- ### 商品中心： myst-item ### End ########## -->

                <!-- ### 物流中心： myst-logistics ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.logistics>${sta.jdbc.url.logistics}</jdbc.url.logistics>
                <!-- 用户名 -->
                <jdbc.username.logistics>${sta.jdbc.username.logistics}</jdbc.username.logistics>
                <!-- 密码 -->
                <jdbc.password.logistics>${sta.jdbc.password.logistics}</jdbc.password.logistics>
                <!-- 稳定环境 ### End -->

                <!-- ### 物流中心： myst-logistics ### End ########## -->

                <!-- ### 成员中心： myst-member ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.member>${sta.jdbc.url.member}</jdbc.url.member>
                <!-- 用户名 -->
                <jdbc.username.member>${sta.jdbc.username.member}</jdbc.username.member>
                <!-- 密码 -->
                <jdbc.password.member>${sta.jdbc.password.member}</jdbc.password.member>
                <!-- 稳定环境 ### End -->

                <!-- ### 成员中心： myst-member ### End ########## -->

                <!-- ### 系统中心： myst-system ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.system>${sta.jdbc.url.system}</jdbc.url.system>
                <!-- 用户名 -->
                <jdbc.username.system>${sta.jdbc.username.system}</jdbc.username.system>
                <!-- 密码 -->
                <jdbc.password.system>${sta.jdbc.password.system}</jdbc.password.system>
                <!-- 稳定环境 ### End -->


                <!-- ### 系统中心： myst-system ### End ########## -->

                <!-- ### 仓库中心： myst-warehouse ### Begin ########## -->

                <!-- 稳定环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.warehouse>${sta.jdbc.url.warehouse}</jdbc.url.warehouse>
                <!-- 用户名 -->
                <jdbc.username.warehouse>${sta.jdbc.username.warehouse}</jdbc.username.warehouse>
                <!-- 密码 -->
                <jdbc.password.warehouse>${sta.jdbc.password.warehouse}</jdbc.password.warehouse>
                <!-- 稳定环境 ### End -->


                <!-- ### 仓库中心： myst-warehouse ### End ########## -->


                <!-- #############################  MySQL、MariaDB 集群配置 ## End ############################### -->


                <!-- ############ 导入Excel根路径，配置 ## Begin ############################ -->

                <!-- 稳定环境 -->
                <excel.import.file.rootDir>${sta.excel.import.file.rootDir}</excel.import.file.rootDir>

                <!-- ############ 导入Excel根路径，配置 ## End ############################ -->

                <!-- ############ 百度富文本编辑临时目录，配置 ## Begin ############################ -->

                <!-- 稳定环境 -->
                <ueditor.tmp.dir>${sta.ueditor.tmp.dir}</ueditor.tmp.dir>

                <!-- ############ 百度富文本编辑临时目录，配置 ## End ############################ -->


            </properties>
        </profile>
        <!-- 预发布环境  -->
        <profile>
            <id>pre</id>
            <!-- 必须设置一个环境，否则参数报错，设置为默认激活  -->
            <!--<activation>
                <activeByDefault>true</activeByDefault>
            </activation>-->
            <properties>
                <profile.dir>${resources.dir}/pre</profile.dir>
                <target.env>pre</target.env>


            </properties>
        </profile>
        <!-- 生产环境  -->
        <profile>
            <id>pro</id>
            <!-- 当JDK 为1.8版本时激活  -->
            <!--<activation>
                <jdk>1.8</jdk>
            </activation>-->
            <!-- 必须设置一个环境，否则参数报错，设置为默认激活  -->
            <!--<activation>
                <activeByDefault>true</activeByDefault>
            </activation>-->
            <properties>
                <profile.dir>${resources.dir}/pro</profile.dir>
                <target.env>pro</target.env>


                <!-- ############ Dubbo 服务版本号 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <dubbo.service.logService.version>${pro.version}</dubbo.service.logService.version>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <dubbo.service.cacheService.version>${pro.version}</dubbo.service.cacheService.version>
                <dubbo.service.dynamicCacheService.version>${pro.version}</dubbo.service.dynamicCacheService.version>

                <!-- msyt-cache ## End -->
                <!-- msyt-cache ## End -->



                <!-- msyt-collector ## Begin -->

                <dubbo.service.collectorItemService.version>${pro.version}</dubbo.service.collectorItemService.version>
                <dubbo.service.collectorItemBiddingService.version>${pro.version}
                </dubbo.service.collectorItemBiddingService.version>
                <dubbo.service.collectorAttributeService.version>${pro.version}
                </dubbo.service.collectorAttributeService.version>
                <dubbo.service.collectorAttributeGroupService.version>${pro.version}
                </dubbo.service.collectorAttributeGroupService.version>
                <dubbo.service.collectorAttributeGroupAttributeService.version>${pro.version}
                </dubbo.service.collectorAttributeGroupAttributeService.version>
                <dubbo.service.collectorItemBrandService.version>${pro.version}
                </dubbo.service.collectorItemBrandService.version>
                <dubbo.service.collectorItemCategoryService.version>${pro.version}
                </dubbo.service.collectorItemCategoryService.version>
                <dubbo.service.collectorItemOriginService.version>${pro.version}
                </dubbo.service.collectorItemOriginService.version>
                <dubbo.service.collectorItemPriceService.version>${pro.version}
                </dubbo.service.collectorItemPriceService.version>
                <dubbo.service.collectorItemCollectionService.version>${pro.version}
                </dubbo.service.collectorItemCollectionService.version>
                <dubbo.service.collectorEditorService.version>${pro.version}
                </dubbo.service.collectorEditorService.version>
                <dubbo.service.collectorItemAttributeService.version>${pro.version}
                </dubbo.service.collectorItemAttributeService.version>
                <dubbo.service.collectorItemHistoryService.version>${pro.version}
                </dubbo.service.collectorItemHistoryService.version>
                <dubbo.service.collectorItemContentService.version>${pro.version}
                </dubbo.service.collectorItemContentService.version>
                <dubbo.service.itemFormalImageLibService.version>${pro.version}
                </dubbo.service.itemFormalImageLibService.version>
                <dubbo.service.itemBarcodeService.version>${pro.version}</dubbo.service.itemBarcodeService.version>
                <dubbo.service.itemAttributeImageService.version>${pro.version}
                </dubbo.service.itemAttributeImageService.version>
                <dubbo.service.itemLogService.version>${pro.version}</dubbo.service.itemLogService.version>

                <dubbo.service.categoryAttributeGroupService.version>${pro.version}
                </dubbo.service.categoryAttributeGroupService.version>
                <!-- msyt-collector ## End -->

                <!-- msyt-content ### Begin -->

                <dubbo.service.contentService.version>${pro.version}</dubbo.service.contentService.version>
                <dubbo.service.contentKeywordService.version>${pro.version}
                </dubbo.service.contentKeywordService.version>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <dubbo.service.fileResourceDownloadService.version>${pro.version}
                </dubbo.service.fileResourceDownloadService.version>
                <dubbo.service.fileResourceUploadService.version>${pro.version}
                </dubbo.service.fileResourceUploadService.version>
                <dubbo.service.ablumLibService.version>${pro.version}</dubbo.service.ablumLibService.version>
                <dubbo.service.fileResourceTemplateService.version>${pro.version}</dubbo.service.fileResourceTemplateService.version>

                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <dubbo.service.itemOfficialService.version>${pro.version}</dubbo.service.itemOfficialService.version>
                <dubbo.service.itemBasicOfficialService.version>${pro.version}
                </dubbo.service.itemBasicOfficialService.version>
                <dubbo.service.itemCollectionOfficialService.version>${pro.version}
                </dubbo.service.itemCollectionOfficialService.version>
                <dubbo.service.itemBarCodeOfficialService.version>${pro.version}
                </dubbo.service.itemBarCodeOfficialService.version>
                <dubbo.service.itemAttributeOfficialService.version>${pro.version}
                </dubbo.service.itemAttributeOfficialService.version>
                <dubbo.service.itemAttributeImageOfficialService.version>${pro.version}
                </dubbo.service.itemAttributeImageOfficialService.version>
                <dubbo.service.itemPriceOfficialService.version>${pro.version}
                </dubbo.service.itemPriceOfficialService.version>
                <dubbo.service.itemOfficialExtService.version>${pro.version}
                </dubbo.service.itemOfficialExtService.version>

                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <dubbo.service.logisticsCustomsDeclareService.vesion>${pro.version}
                </dubbo.service.logisticsCustomsDeclareService.vesion>
                <dubbo.service.logisticsCustomsDeclareOfficialService.vesion>${pro.version}
                </dubbo.service.logisticsCustomsDeclareOfficialService.vesion>
                <dubbo.service.logisticsUnitService.vesion>${pro.version}
                </dubbo.service.logisticsUnitService.vesion>

                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <dubbo.service.memberService.vesion>${pro.version}</dubbo.service.memberService.vesion>
                <dubbo.service.menuService.vesion>${pro.version}</dubbo.service.menuService.vesion>
                <dubbo.service.buttonService.version>${pro.version}</dubbo.service.buttonService.version>
                <dubbo.service.memberCateService.version>${pro.version}</dubbo.service.memberCateService.version>
                <dubbo.service.roleService.version>${pro.version}</dubbo.service.roleService.version>
                <dubbo.service.memberRoleService.version>${pro.version}</dubbo.service.memberRoleService.version>
                <dubbo.service.departmentService.version>${pro.version}</dubbo.service.departmentService.version>
                <dubbo.service.resourceGroupService.version>${pro.version}</dubbo.service.resourceGroupService.version>
                <dubbo.service.roleResourceGroupService.version>${pro.version}
                </dubbo.service.roleResourceGroupService.version>
                <dubbo.service.resourceService.version>${pro.version}</dubbo.service.resourceService.version>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <dubbo.service.sysDataDictionaryService.vesion>${pro.version}
                </dubbo.service.sysDataDictionaryService.vesion>
                <dubbo.service.sysMemberLoginLogService.vesion>${pro.version}
                </dubbo.service.sysMemberLoginLogService.vesion>
                <dubbo.service.sysConsumeMessageService.vesion>${pro.version}
                </dubbo.service.sysConsumeMessageService.vesion>
                <dubbo.service.sysSettingService.vesion>${pro.version}</dubbo.service.sysSettingService.vesion>
                <dubbo.service.sysVerifyCodePictureService.vesion>${pro.version}</dubbo.service.sysVerifyCodePictureService.vesion>
                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <dubbo.service.warehouseService.version>${pro.version}</dubbo.service.warehouseService.version>
                <dubbo.service.warehouseTypeService.version>${pro.version}</dubbo.service.warehouseTypeService.version>
                <dubbo.service.warehouseOfficialService.version>${pro.version}
                </dubbo.service.warehouseOfficialService.version>

                <!-- msyt-warehouse ### End -->
                <!-- msyt-thirdplatform ## Begin -->

                <dubbo.service.thirdplatform.erpStockService.version>${pro.version}
                </dubbo.service.thirdplatform.erpStockService.version>

                <!-- msyt-thirdplatform ## End -->

                <!-- ############ Dubbo 服务版本号 ## End  ###########  -->


                <!-- ########################### 启动是否检查服务 ## Begin ########################################################## -->


                <!-- ############ Dubbo 服务，启动时是否检查 ## Begin  ########### -->
                <!-- ######## 注意：除了 msyt-log 其他的模块，都是按照 IDEA左边模块顺序，方便维护！！！ -->
                <!-- msyt-log  ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.log>${pro.dubbo.consumer.check}</dubbo.consumer.check.log>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.msOnionLog>${pro.dubbo.reference.check}</dubbo.reference.check.msOnionLog>

                <!-- msyt-log  ## End -->

                <!-- msyt-cache ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.cache>${pro.dubbo.consumer.check}</dubbo.consumer.check.cache>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.cacheService>${pro.dubbo.reference.check}</dubbo.reference.check.cacheService>
                <dubbo.reference.check.dynamicCacheService>${pro.dubbo.reference.check}</dubbo.reference.check.dynamicCacheService>

                <!-- msyt-cache ## End -->

                <!-- msyt-collector ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.collector>${pro.dubbo.consumer.check}</dubbo.consumer.check.collector>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBiddingService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBiddingService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorAttributeGroupAttributeService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorAttributeGroupAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemBrandService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemBrandService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCategoryService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCategoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemOriginService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemOriginService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemPriceService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemPriceService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemCollectionService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemCollectionService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorEditorService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorEditorService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemAttributeService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemAttributeService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemHistoryService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemHistoryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.collectorItemContentService>${pro.dubbo.reference.check}
                </dubbo.reference.check.collectorItemContentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemFormalImageLibService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemFormalImageLibService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBarcodeService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemBarcodeService>
                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemLogService>${dev.dubbo.reference.check}
                </dubbo.reference.check.itemLogService>

                <dubbo.reference.check.itemAttributeImageService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageService>

                <dubbo.reference.check.categoryAttributeGroupService>${pro.dubbo.reference.check}
                </dubbo.reference.check.categoryAttributeGroupService>

                <!-- msyt-collector ## End -->

                <!-- msyt-content ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.content>${pro.dubbo.consumer.check}</dubbo.consumer.check.content>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentService>${pro.dubbo.reference.check}
                </dubbo.reference.check.contentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.contentKeywordService>${pro.dubbo.reference.check}
                </dubbo.reference.check.contentKeywordService>

                <!-- msyt-content ### End -->

                <!-- msyt-fileresource ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.fileresource>${pro.dubbo.consumer.check}</dubbo.consumer.check.fileresource>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceDownloadService>${pro.dubbo.reference.check}
                </dubbo.reference.check.fileResourceDownloadService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.fileResourceUploadService>${pro.dubbo.reference.check}
                </dubbo.reference.check.fileResourceUploadService>
                <dubbo.reference.check.fileResourceTemplateService>${pro.dubbo.reference.check}
                </dubbo.reference.check.fileResourceTemplateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.ablumLibService>${pro.dubbo.reference.check}
                </dubbo.reference.check.ablumLibService>


                <!-- msyt-fileresource ### End -->

                <!-- myst-item ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.item>${pro.dubbo.consumer.check}</dubbo.consumer.check.item>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemBasicOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemBasicOfficialService>


                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.itemCollectionOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemCollectionOfficialService>
                <dubbo.reference.check.itemBarCodeOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemBarCodeOfficialService>
                <dubbo.reference.check.itemAttributeImageOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeImageOfficialService>
                <dubbo.reference.check.itemAttributeOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemAttributeOfficialService>
                <dubbo.reference.check.itemPriceOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemPriceOfficialService>
                <dubbo.reference.check.itemOfficialExtService>${pro.dubbo.reference.check}
                </dubbo.reference.check.itemOfficialExtService>


                <!-- myst-item ### End -->

                <!-- msyt-logistics ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.logistics>${pro.dubbo.consumer.check}</dubbo.consumer.check.logistics>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.logisticsCustomsDeclareService>${pro.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareService>
                <dubbo.reference.check.logisticsCustomsDeclareOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.logisticsCustomsDeclareOfficialService>
                <dubbo.reference.check.logisticsUnitService>${pro.dubbo.reference.check}
                </dubbo.reference.check.logisticsUnitService>

                <!-- msyt-logistics ### End -->

                <!-- msyt-manager ### 模块本身没有服务，都是调用其他服务！！！ -->

                <!-- msyt-member ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.member>${pro.dubbo.consumer.check}</dubbo.consumer.check.member>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberService>${pro.dubbo.reference.check}</dubbo.reference.check.memberService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.menuService>${pro.dubbo.reference.check}</dubbo.reference.check.menuService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.buttonService>${pro.dubbo.reference.check}</dubbo.reference.check.buttonService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberCateService>${pro.dubbo.reference.check}
                </dubbo.reference.check.memberCateService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleService>${pro.dubbo.reference.check}</dubbo.reference.check.roleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.memberRoleService>${pro.dubbo.reference.check}
                </dubbo.reference.check.memberRoleService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.departmentService>${pro.dubbo.reference.check}
                </dubbo.reference.check.departmentService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceGroupService>${pro.dubbo.reference.check}
                </dubbo.reference.check.resourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.roleResourceGroupService>${pro.dubbo.reference.check}
                </dubbo.reference.check.roleResourceGroupService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.resourceService>${pro.dubbo.reference.check}
                </dubbo.reference.check.resourceService>

                <!-- msyt-member ### End -->

                <!-- msyt-system ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.system>${pro.dubbo.consumer.check}</dubbo.consumer.check.system>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysDataDictionaryService>${pro.dubbo.reference.check}
                </dubbo.reference.check.sysDataDictionaryService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysMemberLoginLogService>${pro.dubbo.reference.check}
                </dubbo.reference.check.sysMemberLoginLogService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysConsumeMessageService>${pro.dubbo.reference.check}
                </dubbo.reference.check.sysConsumeMessageService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysSettingService>${pro.dubbo.reference.check}
                </dubbo.reference.check.sysSettingService>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.sysVerifyCodePictureService>${pro.dubbo.reference.check}
                </dubbo.reference.check.sysVerifyCodePictureService>

                <!-- msyt-system ### End -->

                <!-- msyt-warehouse ### Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.warehouse>${pro.dubbo.consumer.check}</dubbo.consumer.check.warehouse>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.warehouseService>${pro.dubbo.reference.check}
                </dubbo.reference.check.warehouseService>
                <dubbo.reference.check.warehouseOfficialService>${pro.dubbo.reference.check}
                </dubbo.reference.check.warehouseOfficialService>

                <!-- msyt-warehouse ### End -->

                <!-- msyt-thirdplatform ## Begin -->

                <!-- <dubbo:consumer/> 服务消费者缺省值配置：说明：该标签为<dubbo:reference>标签的缺省值设置 -->
                <!-- 是否关闭所有服务的启动时检查：(没有提供者时报错) : <dubbo:consumer check="false" /> -->
                <dubbo.consumer.check.thirdplatform.erp>${pro.dubbo.consumer.check}
                </dubbo.consumer.check.thirdplatform.erp>

                <!-- 是否关闭某个服务的启动时检查：(没有提供者时报错) -->
                <dubbo.reference.check.thirdplatform.erpStockService>${pro.dubbo.reference.check}
                </dubbo.reference.check.thirdplatform.erpStockService>

                <!-- msyt-thirdplatform ## End -->
                <!-- ############ Dubbo 服务，启动时是否检查 ## End  ###########  -->


                <!-- ########################### 启动是否检查服务 ## End  ########################################################## -->


                <!-- ################  RocketMQ配置 ## Begin ########################### -->

                <!-- namesrvAddr -->
                <rocketmq.namesrvAddr>rocketmq01-test:9876;rocketmq02-test:9876</rocketmq.namesrvAddr>

                <!-- producerGroup ## Begin -->
                <rocketmq.producerGroup.collectorService>mq-producerGroup-collectorService-test
                </rocketmq.producerGroup.collectorService>
                <rocketmq.producerGroup.contentService>mq-producerGroup-contentService-test
                </rocketmq.producerGroup.contentService>
                <rocketmq.producerGroup.fileResourceService>mq-producerGroup-fileResourceService-test
                </rocketmq.producerGroup.fileResourceService>
                <rocketmq.producerGroup.itemService>mq-producerGroup-itemService-test
                </rocketmq.producerGroup.itemService>
                <rocketmq.producerGroup.logisticsService>mq-producerGroup-logisticsService-test
                </rocketmq.producerGroup.logisticsService>
                <rocketmq.producerGroup.memberService>mq-producerGroup-memberService-test
                </rocketmq.producerGroup.memberService>
                <rocketmq.producerGroup.systemService>mq-producerGroup-systemService-test
                </rocketmq.producerGroup.systemService>
                <rocketmq.producerGroup.warehouseService>mq-producerGroup-warehouseService-test
                </rocketmq.producerGroup.warehouseService>
                <!-- producerGroup ## End -->

                <!-- topic -->
                <rocketmq.topic>mq-topic-test-01</rocketmq.topic>

                <!-- consumerGroup ## Begin -->
                <rocketmq.consumerGroup.systemService>mq-consumerGroup-systemService-test
                </rocketmq.consumerGroup.systemService>
                <rocketmq.consumerGroup.managerWeb>mq-consumerGroup-managerWeb-test</rocketmq.consumerGroup.managerWeb>
                <rocketmq.consumerGroup.itemService>mq-consumerGroup-itemService-test
                </rocketmq.consumerGroup.itemService>
                <rocketmq.consumerGroup.searchService>mq-consumerGroup-searchService-test
                </rocketmq.consumerGroup.searchService>
                <!-- consumerGroup ## End -->

                <!-- subExpression ## Begin -->
                <!-- subExpression ## * : all, or : Menu@Save || Menu@Update -->
                <rocketmq.consumer.subExpression.systemService>*</rocketmq.consumer.subExpression.systemService>
                <rocketmq.consumer.subExpression.managerWeb>*</rocketmq.consumer.subExpression.managerWeb>
                <rocketmq.consumer.subExpression.itemService>*</rocketmq.consumer.subExpression.itemService>
                <rocketmq.consumer.subExpression.searchService>*</rocketmq.consumer.subExpression.searchService>
                <!-- subExpression ## End -->

                <!-- ###################### RocketMQ配置 ## End ####################### -->

                <!-- ###################### 日志中心，日志配置 ## Begin ####################### -->

                <flogger.log.path>${pro.flogger.log.path}</flogger.log.path>

                <flogger.log.console.print>${pro.flogger.log.console.print}</flogger.log.console.print>

                <!-- # 日志级别   0:调试信息  1:普通信息   2:警告信息  3:错误信息  4:严重错误信息 -->
                <flogger.log.level>${pro.flogger.log.level}</flogger.log.level>

                <!-- ###################### 日志中心，日志配置 ## End ####################### -->


                <!-- ###################### Redis集群配置 ## Begin ####################### -->

                <!-- 第1个节点 -->
                <redis.cluster.host.node1>${pro.redis.cluster.host.node1}</redis.cluster.host.node1>
                <redis.cluster.port.node1>${pro.redis.cluster.port.node1}</redis.cluster.port.node1>

                <!-- 第2个节点 -->
                <redis.cluster.host.node2>${pro.redis.cluster.host.node2}</redis.cluster.host.node2>
                <redis.cluster.port.node2>${pro.redis.cluster.port.node2}</redis.cluster.port.node2>

                <!-- 第3个节点 -->
                <redis.cluster.host.node3>${pro.redis.cluster.host.node3}</redis.cluster.host.node3>
                <redis.cluster.port.node3>${pro.redis.cluster.port.node3}</redis.cluster.port.node3>

                <!-- ###################### Redis集群配置 ## End  ####################### -->

                <!-- #############################  Zookeeper 集群配置 ## Begin ############################### -->

                <zk.connectString>${pro.zk.connectString}</zk.connectString>

                <!-- #############################  Zookeeper 集群配置 ## End ############################### -->

                <!-- #############################  MySQL、MariaDB 集群配置 ## Begin ############################### -->


                <!-- ########## DruidDataSource ### 配置 ## Begin ##############  -->

                <!-- 生产环境 ### Begin -->
                <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
                <jdbc.initialSize>${pro.jdbc.initialSize}</jdbc.initialSize>
                <!-- 最小连接池数量 -->
                <jdbc.minIdle>${pro.jdbc.minIdle}</jdbc.minIdle>
                <!-- 最大连接池数量 -->
                <jdbc.maxActive>${pro.jdbc.maxActive}</jdbc.maxActive>
                <!-- 获取连接时最大等待时间，单位毫秒，60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.maxWait>${pro.jdbc.maxWait}</jdbc.maxWait>
                <!--
                配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
                有两个含义：
                1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 -->
                <jdbc.timeBetweenEvictionRunsMillis>${pro.jdbc.timeBetweenEvictionRunsMillis}</jdbc.timeBetweenEvictionRunsMillis>
                <!-- 连接保持空闲而不被驱逐的最长时间 , 单位是毫秒, 60000 毫秒 ==> 60s ==> 1分钟 -->
                <jdbc.minEvictableIdleTimeMillis>${pro.jdbc.minEvictableIdleTimeMillis}</jdbc.minEvictableIdleTimeMillis>
                <!-- 生产环境 ### End -->

                <!-- ########## DruidDataSource ### 配置 ## End ##############  -->

                <!-- ### 收集中心： myst-collector ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.collector>${pro.jdbc.url.collector}</jdbc.url.collector>
                <!-- 用户名 -->
                <jdbc.username.collector>${pro.jdbc.username.collector}</jdbc.username.collector>
                <!-- 密码 -->
                <jdbc.password.collector>${pro.jdbc.password.collector}</jdbc.password.collector>
                <!-- 生产环境 ### End -->

                <!-- ### 收集中心： myst-collector ### End ########## -->


                <!-- ### 内容中心： myst-content ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.content>${pro.jdbc.url.content}</jdbc.url.content>
                <!-- 用户名 -->
                <jdbc.username.content>${pro.jdbc.username.content}</jdbc.username.content>
                <!-- 密码 -->
                <jdbc.password.content>${pro.jdbc.password.content}</jdbc.password.content>
                <!-- 生产环境 ### End -->


                <!-- ### 内容中心： myst-content ### End ########## -->

                <!-- ### 文件资源中心： myst-fileresource ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.fileresource>${pro.jdbc.url.fileresource}</jdbc.url.fileresource>
                <!-- 用户名 -->
                <jdbc.username.fileresource>${pro.jdbc.username.fileresource}</jdbc.username.fileresource>
                <!-- 密码 -->
                <jdbc.password.fileresource>${pro.jdbc.password.fileresource}</jdbc.password.fileresource>
                <!-- 生产环境 ### End -->


                <!-- ### 文件资源中心： myst-fileresource ### End ########## -->

                <!-- ### 商品中心： myst-item ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.item>${pro.jdbc.url.item}</jdbc.url.item>
                <!-- 用户名 -->
                <jdbc.username.item>${pro.jdbc.username.item}</jdbc.username.item>
                <!-- 密码 -->
                <jdbc.password.item>${pro.jdbc.password.item}</jdbc.password.item>
                <!-- 生产环境 ### End -->


                <!-- ### 商品中心： myst-item ### End ########## -->

                <!-- ### 物流中心： myst-logistics ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.logistics>${pro.jdbc.url.logistics}</jdbc.url.logistics>
                <!-- 用户名 -->
                <jdbc.username.logistics>${pro.jdbc.username.logistics}</jdbc.username.logistics>
                <!-- 密码 -->
                <jdbc.password.logistics>${pro.jdbc.password.logistics}</jdbc.password.logistics>
                <!-- 生产环境 ### End -->

                <!-- ### 物流中心： myst-logistics ### End ########## -->

                <!-- ### 成员中心： myst-member ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.member>${pro.jdbc.url.member}</jdbc.url.member>
                <!-- 用户名 -->
                <jdbc.username.member>${pro.jdbc.username.member}</jdbc.username.member>
                <!-- 密码 -->
                <jdbc.password.member>${pro.jdbc.password.member}</jdbc.password.member>
                <!-- 生产环境 ### End -->

                <!-- ### 成员中心： myst-member ### End ########## -->

                <!-- ### 系统中心： myst-system ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.system>${pro.jdbc.url.system}</jdbc.url.system>
                <!-- 用户名 -->
                <jdbc.username.system>${pro.jdbc.username.system}</jdbc.username.system>
                <!-- 密码 -->
                <jdbc.password.system>${pro.jdbc.password.system}</jdbc.password.system>
                <!-- 生产环境 ### End -->


                <!-- ### 系统中心： myst-system ### End ########## -->

                <!-- ### 仓库中心： myst-warehouse ### Begin ########## -->

                <!-- 生产环境 ### Begin -->
                <!-- 连接地址 -->
                <jdbc.url.warehouse>${pro.jdbc.url.warehouse}</jdbc.url.warehouse>
                <!-- 用户名 -->
                <jdbc.username.warehouse>${pro.jdbc.username.warehouse}</jdbc.username.warehouse>
                <!-- 密码 -->
                <jdbc.password.warehouse>${pro.jdbc.password.warehouse}</jdbc.password.warehouse>

                <!-- 生产环境 ### End -->


                <!-- ### 仓库中心： myst-warehouse ### End ########## -->


                <!-- #############################  MySQL、MariaDB 集群配置 ## End ############################### -->


                <!-- ############ 导入Excel根路径，配置 ## Begin ############################ -->

                <!-- 生产环境 -->
                <excel.import.file.rootDir>${pro.excel.import.file.rootDir}</excel.import.file.rootDir>

                <!-- ############ 导入Excel根路径，配置 ## End ############################ -->

                <!-- ############ 百度富文本编辑临时目录，配置 ## Begin ############################ -->

                <!-- 生产环境 -->
                <ueditor.tmp.dir>${pro.ueditor.tmp.dir}</ueditor.tmp.dir>

                <!-- ############ 百度富文本编辑临时目录，配置 ## End ############################ -->

            </properties>

        </profile>
    </profiles>

    <!-- ###################  多套环境，不同环境的配置不同， ## End  ################### -->

</project>