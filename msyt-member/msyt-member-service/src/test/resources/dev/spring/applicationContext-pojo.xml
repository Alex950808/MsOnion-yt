<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			 									 http://www.springframework.org/schema/beans/spring-beans.xsd
        										 http://www.springframework.org/schema/context 
        										 http://www.springframework.org/schema/context/spring-context.xsd
        										 http://code.alibabatech.com/schema/dubbo 
        										 http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 配置加载配置文件 -->
    <!--<context:property-placeholder location="classpath:properties/*.properties"/>-->

    <!--<context:property-placeholder location="classpath:properties/config-*.properties"/>-->

    <!--<context:property-placeholder location="classpath:properties/config-*.properties"/>-->

    <!-- 不是WEB工程，不要 classpath: -->
    <!-- 	<context:property-placeholder location="properties/*.properties"/> -->

    <!-- 直接使用 bean 无法 扫描  Domain 中的  @Value 注解，必须使用 ： context:component-scan  -->
    <!-- <bean class="cc.msonion.parent.pojo.Domain"></bean> -->

    <!-- 注意，这里扫描的包 和 service 中扫描的包，不要冲突！！！ -->

    <!--  OK  -->
    <context:component-scan base-package="cc.msonion.carambola.parent.pojo"/>

    <!-- MemPojoStringFieldUtilsPOJO -->
    <context:component-scan base-package="cc.msonion.carambola.member.pojo"/>

    <context:component-scan base-package="test.msonion.carambola.member.service.batch.service" />

    <!-- 日志  log ## 不可以这样，必须启动 日志服务 ！！！ -->
    <!--<context:component-scan base-package="test.msonion.carambola.member.service.log" />-->


    <!-- RetryNTimes -->
    <bean id="retryPolicy" class="org.apache.curator.retry.RetryNTimes">
        <constructor-arg name="n" value="${zk.retryPolicyN}"></constructor-arg>
        <constructor-arg name="sleepMsBetweenRetries" value="${zk.retryPolicy.sleepMsBetweenRetries}"></constructor-arg>
    </bean>

    <!-- MsOnionCuratorZookeeperClient -->
    <bean class="cc.msonion.carambola.parent.pojo.zk.client.MsOnionCuratorZookeeperClient">

        <constructor-arg name="zkConnectString" value="${zk.connectString}"></constructor-arg>

        <constructor-arg name="sessionTimeoutMs" value="${zk.sessionTimeoutMs}"></constructor-arg>
        <constructor-arg name="retryPolicy" ref="retryPolicy"></constructor-arg>
    </bean>

    <!-- RocketMQ ## Begin  -->

	<!-- 生产者：Producer ## Begin -->
    <!--<bean class="cc.msonion.carambola.parent.ext.mq.rocketmq.simple.MsOnionSimpleRocketMQProducerExt">
-->
        <!-- 构造方法参数: producerGroup, namesrvAddr, topic -->
       <!-- <constructor-arg name="producerGroup" value="${rocketmq.producerGroup}"/>
        <constructor-arg name="namesrvAddr" value="${rocketmq.namesrvAddr}"/>
        <constructor-arg name="topic" value="${rocketmq.topic}"/>
    </bean>-->
    <!-- 生产者：Producer ## End -->


    <!-- 普通 Listener   -->
    <bean id="testMQMessageListenerConcurrently"
          class="test.msonion.carambola.member.service.mq.rocketmq.messagelistener.TestMQMessageListenerConcurrently"/>


    <!-- 普通消费者 -->
    <bean id="testRocketMQPushConsumerExt"
          class="test.msonion.carambola.member.service.mq.rocketmq.TestRocketMQPushConsumerExt">

        <!-- 构造方法参数 ： String consumerGroup, String namesrvAddr, String topic,
         String subExpression, MsOnionRocketMQMessageListenerConcurrently listenerConcurrently -->

        <constructor-arg index="0" name="consumerGroup" value="${rocketmq.consumerGroup}"/>

        <constructor-arg index="1" name="namesrvAddr" value="${rocketmq.namesrvAddr}"/>


        <!--<constructor-arg name="topic" value="${rocketmq.consumer.topic}" />-->

        <constructor-arg index="2" name="topic" value="${rocketmq.topic}"/>


        <constructor-arg index="3" name="subExpression" value="${rocketmq.consumer.topic.subExpression}"/>


        <constructor-arg index="4" name="listenerConcurrently" ref="testMQMessageListenerConcurrently"/>

        <constructor-arg index="5" name="consumeFromWhere" value="${rocketmq.consumer.consumeFromWhere}"/>

    </bean>


    <!-- RocketMQ ## End   -->

</beans>
